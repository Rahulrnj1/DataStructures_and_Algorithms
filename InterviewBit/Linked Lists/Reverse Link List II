https://www.interviewbit.com/problems/reverse-link-list-ii/

/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,
return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list. Note 2:
Usually the version often seen in the interviews is reversing the whole linked list,
which is obviously an easier version of this question. 
*/

public class Solution {
	public ListNode reverseBetween(ListNode A, int B, int C) {
		if (B >= C)
			return A;
		ListNode head = A;
		ListNode pre = null;
		int m = 1;
		while (m < B) {
			pre = head;
			head = head.next;
			m++;
		}
		ListNode curr = head;
		ListNode prev = null;
		ListNode next = null;
		C = C - B;
		while (C >= 0 && curr != null) {
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
			C--;
		}
		if (C == -1) {
			if (pre != null) {
				pre.next = prev;
			} else {
				A = prev;
			}
			head.next = curr;
		}
		return A;
	}
}
