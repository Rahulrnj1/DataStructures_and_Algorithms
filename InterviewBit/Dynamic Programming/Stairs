https://www.interviewbit.com/problems/stairs/

/*
You are climbing a stair case and it takes A steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Input Format:

The first and the only argument contains an integer A, the number of steps.
Output Format:

Return an integer, representing the number of ways to reach the top.
Constrains:

1 <= A <= 36
Example :

Input 1:

A = 2 Output 1:

2 Explanation 1:

[1, 1], [2] Input 2:

A = 3 Output 2:

3 Explanation 2: 

[1 1 1], [1 2], [2 1]
*/

public class Solution {
    public int climbStairs(int A, int[] memo) {
        if (A < 0)
            return 0;
        if (A == 0)
            return 1;
        if (memo[A] > -1)
            return memo[A];
        memo[A] = climbStairs(A - 1, memo) + climbStairs(A - 2, memo);
        return memo[A];
    }
    public int climbStairs(int A) {
        int[] memo = new int[A + 1];
        Arrays.fill(memo, -1);
        return climbStairs(A, memo);
    }
}
