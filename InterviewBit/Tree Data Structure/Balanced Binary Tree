https://www.interviewbit.com/problems/balanced-binary-tree/

/*
Given a binary tree, determine if it is height-balanced.
Height-balanced binary tree : is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
Return 0 / 1 ( 0 for false, 1 for true ) for this problem

Example :

Input : 
          1
         / \
        2   3

Return : True or 1 

Input 2 : 
         3
        /
       2
      /
     1

Return : False or 0 
Because for the root node, left subtree has depth 2 and right subtree has depth 0. 
Difference = 2 > 1. 
*/

public class Solution {
    static int height(TreeNode node) {
        if (node == null)
            return 0;
        int lheight = height(node.left);
        int rheight = height(node.right);
        if (lheight > rheight)
            return lheight + 1;
        else
            return rheight + 1;
    }
    public int isBalanced(TreeNode A) {
        if (A == null)
            return 1;
        int lheight = height(A.left);
        int rheight = height(A.right);
        return (Math.abs(lheight - rheight) <= 1 && isBalanced(A.left) == 1 && isBalanced(A.right) == 1) ? 1 : 0;
    }
}
