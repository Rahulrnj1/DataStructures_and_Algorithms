https://www.youtube.com/watch?v=MW4lJ8Y0xXk&list=PL_z_8CaSLPWeM8BDJmIYDaoQ5zuwyxnfj&index=5

https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92007/Sliding-Window-algorithm-template-to-solve-all-the-Leetcode-substring-search-problem.

/*
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.

Example 1:
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
*/

class Solution {
    public List < Integer > findAnagrams(String s, String p) {
        List < Integer > res = new ArrayList();
        if (p.length() > s.length())
            return res;
        int begin = 0, end = 0;
        Map < Character, Integer > m = new HashMap < > ();
        for (char c: p.toCharArray()) {
            m.put(c, m.getOrDefault(c, 0) + 1);
        }
        int counter = m.size();
        while (end < s.length()) {
            char c = s.charAt(end);
            if (m.containsKey(c)) {
                m.put(c, m.getOrDefault(c, 0) - 1);
                if (m.get(c) == 0)
                    counter--;
            }
            end++;
            while (counter == 0) {
                char temp = s.charAt(begin);
                if (m.containsKey(temp)) {
                    m.put(temp, m.getOrDefault(temp, 0) + 1);
                    if (m.get(temp) > 0)
                        counter++;
                }
                if (end - begin == p.length())
                    res.add(begin);
                begin++;
            }
        }
        return res;

    }
}
