https://leetcode.com/problems/subarrays-with-k-different-integers/

/*
Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length
*/

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        int left1=0, left2=0, ans = 0;
      
        Window win1=new Window();
        Window win2=new Window();
      
        for(int right = 0; right<nums.length; right++){
          win1.add(nums[right]);
          win2.add(nums[right]);
          
          while(win1.difference()>k){
            win1.remove(nums[left1++]);
          }
          while(win2.difference()>=k){
            win2.remove(nums[left2++]);
          }
          
          ans+= left2-left1;
        }
      return ans;
    }
}

class Window{
  HashMap<Integer, Integer> count;
  int currFreq;
  
  Window(){
     count = new HashMap<Integer, Integer>();
     currFreq = 0;
  }
  
  public void add(int n){
    int freq =  count.getOrDefault(n,0)+1;
    count.put(n, freq);
    if(freq==1){
      currFreq++;
    }
  }
  
  public void remove(int n){
    int freq =  count.get(n)-1;
    count.put(n, freq);
    if(freq==0){
      currFreq--;
    }
  }
  
  public int difference(){
    return currFreq;
  }
  
}
