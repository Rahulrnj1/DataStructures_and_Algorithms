/*
Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

Example 1:
Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].

Example 2:
Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
 
Constraints:
1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 100

Hint #1  
Use dynamic programming. dp[i][j] will be the answer for inputs A[i:], B[j:].
*/

//Recursive
class Solution {

  public int findLength(int[] nums1, int[] nums2, int m, int n, int count) {
    if (m == 0 || n == 0)
      return count;

    if (nums1[m - 1] == nums2[n - 1])
      count = findLength(nums1, nums2, m - 1, n - 1, count + 1);

    count = Math.max(count, Math.max(findLength(nums1, nums2, m, n - 1, 0), findLength(nums1, nums2, m - 1, n, 0)));
    return count;
  }

  public int findLength(int[] nums1, int[] nums2) {
    int m = nums1.length, n = nums2.length;
    return findLength(nums1, nums2, m, n, 0);
  }
}


//Dynamic programming
class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int m = nums1.length; int n = nums2.length, ans=0;
        int[][] dp = new int[m+1][n+1];
        for(int i=1;i<=m;i++){
          for(int j=1;j<=n;j++){
            if(nums1[i-1]==nums2[j-1]){
              dp[i][j]= dp[i-1][j-1]+1;
              ans = Math.max(ans,dp[i][j]);
            }
          }
        }
      return ans;
    }
}
