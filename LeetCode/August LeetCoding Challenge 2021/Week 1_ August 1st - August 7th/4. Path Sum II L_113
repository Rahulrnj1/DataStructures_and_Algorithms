/*
Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.
A leaf is a node with no children.

Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: []

Example 3:
Input: root = [1,2], targetSum = 0
Output: []
 
Constraints:
The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000
*/

class Solution {
  
    public void pathSum(TreeNode root, int targetSum, int sum, List<List<Integer>> res, ArrayList<Integer> li){
      li.add(root.val);
      sum+=root.val;
      if(sum==targetSum && root.left==null && root.right==null){
        res.add(new ArrayList(li));
      }
     
      if(root.left!=null)
      {
        pathSum(root.left, targetSum, sum, res, li);
        li.remove(li.size()-1);
      }
      if(root.right!=null){
        pathSum(root.right, targetSum, sum, res, li);
        li.remove(li.size()-1);
      }  
    }
  
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {    
        List<List<Integer>> res = new ArrayList<>();
        if(root==null)
          return res;
        pathSum(root, targetSum, 0, res, new ArrayList<Integer>());
        return res;
    }
}
