https://leetcode.com/problems/word-subsets/discuss/175854/JavaC%2B%2BPython-Straight-Forward

/*
We are given two arrays A and B of words.  Each word is a string of lowercase letters.
Now, say that word b is a subset of word a if every letter in b occurs in a, including multiplicity.  For example, "wrr" is a subset of "warrior", but is not a subset of "world".
Now say a word a from A is universal if for every b in B, b is a subset of a. 
Return a list of all universal words in A.  You can return the words in any order.

Example 1:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","o"]
Output: ["facebook","google","leetcode"]

Example 2:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["l","e"]
Output: ["apple","google","leetcode"]

Example 3:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","oo"]
Output: ["facebook","google"]

Example 4:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"]
Output: ["google","leetcode"]

Example 5:
Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["ec","oc","ceo"]
Output: ["facebook","leetcode"]
 
Note:
1 <= A.length, B.length <= 10000
1 <= A[i].length, B[i].length <= 10
A[i] and B[i] consist only of lowercase letters.
All words in A[i] are unique: there isn't i != j with A[i] == A[j].
*/

//TLE

class Solution {
    public List < String > wordSubsets(String[] A, String[] B) {
        ArrayList < String > result = new ArrayList();
        for (int i = 0; i < A.length; i++) {
            boolean contains = true;
            String a = A[i];
            for (int j = 0; j < B.length; j++) {
                String b = B[j];
                for (char c: b.toCharArray()) {
                    if (A[i].indexOf(c) != -1) {
                        A[i] = A[i].replaceFirst(String.valueOf(c), "");
                    } else {
                        contains = false;
                        break;
                    }
                }
                A[i] = a;
            }

            if (contains)
                result.add(a);
        }
        return result;
    }
}

=====================================================================================

https://leetcode.com/problems/word-subsets/discuss/175854/JavaC%2B%2BPython-Straight-Forward

class Solution {
    public List < String > wordSubsets(String[] A, String[] B) {
        int count[] = new int[26];
        int temp[] = new int[26];
        for (String b: B) {
            temp = counter(b);
            for (int i = 0; i < 26; i++) {
                count[i] = Math.max(temp[i], count[i]);
            }
        }
        ArrayList < String > result = new ArrayList < String > ();
        for (String a: A) {
            temp = counter(a);
            int i;
            for (i = 0; i < 26; i++) {
                if (temp[i] < count[i]) {
                    break;
                }
            }
            if (i == 26)
                result.add(a);
        }
        return result;
    }

    public int[] counter(String s) {
        int[] count = new int[26];
        for (char c: s.toCharArray()) {
            count[c - 'a']++;
        }
        return count;
    }
}

