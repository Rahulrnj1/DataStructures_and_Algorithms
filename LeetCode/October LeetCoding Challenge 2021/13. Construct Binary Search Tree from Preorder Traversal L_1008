https://github.com/archygupta/DataStructures_and_Algorithms/blob/master/LeetCode/30%20day%20leetcoding%20challenge/Week%203:%20April%2015th-April%2021st/6.%20Construct%20Binary%20Search%20Tree%20from%20Preorder%20Traversal

youtube.com/watch?v=9sw8RRsBw6s

o(n^2)

class Solution {
  
    public TreeNode insert(TreeNode root, int val){
      if(root==null)
      {
        root = new TreeNode(val);
        return root;
      }
       if(root.val>val){
        root.left = insert(root.left, val);
      }
      else{
        root.right = insert(root.right, val);
      }
      return root;
    }
  
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = null;
        for(int i=0;i<preorder.length;i++){
          root = insert(root, preorder[i]);
        }
      return root;
    }
}

==================================================================

class Solution
{
    static int pre=0;
    
    public static Node buildTree(int inorder[], int preorder[], int start, int end){
        if(start>end)
         return null;
         int val = preorder[pre++];
         
         Node temp = new Node(val);
         
         if(start==end)
            return temp;
            
        int ind = search(inorder, val);
            
        temp.left = buildTree(inorder, preorder, start, ind-1);
        temp.right = buildTree(inorder, preorder, ind+1, end);
        return temp;
    }
    
   static  int search(int[] inorder, int val){
        int i =0;
        for( i=0;i<inorder.length;i++){
            if(inorder[i] == val)
            return i;
        }
        return i;
    }
    
    public static Node buildTree(int inorder[], int preorder[], int n)
    {
       return buildTree(inorder, preorder, 0, n-1);
    }
}
