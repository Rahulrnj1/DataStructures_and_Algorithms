//Solution: premium account : https://leetcode.com/problems/serialize-and-deserialize-binary-tree/solution/

/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Example 1:


Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000
*/

public class Codec {
  
    public String serialize(TreeNode root, String str){
      if(root==null){
        str+="null,";
      }
      else{
        str += String.valueOf(root.val)+",";
        str = serialize(root.left, str);
        str = serialize(root.right, str);
      }
      return str;
    }
  
    public String serialize(TreeNode root) {
        return serialize(root, "");
    }

    public TreeNode deserialize(ArrayList<String> data_list){
      if(data_list.size()==0)
        return null;
      
      if(data_list.get(0).equals("null")){
        data_list.remove(0);
        return null;
      }
      
      TreeNode node = new TreeNode(Integer.valueOf(data_list.get(0)));
      data_list.remove(0);
      node.left = deserialize(data_list);
      node.right = deserialize(data_list);
      return node;
    }
  
    public TreeNode deserialize(String data) {
        String[] serialized_data = data.split(",");
        ArrayList<String> data_list = new ArrayList<String>(Arrays.asList(serialized_data));
        return deserialize(data_list);
    }
}
