https://www.youtube.com/watch?v=NDpwj0VWz1U

/*
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:
LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
Follow up:
Could you do get and put in O(1) time complexity?

Example 1:
Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]
Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 
Constraints:
1 <= capacity <= 3000
0 <= key <= 3000
0 <= value <= 104
At most 3 * 104 calls will be made to get and put.
*/

class LRUCache {

	Node head = new Node();
	Node tail = new Node();
	HashMap<Integer, Node> hm;
	int cache_capacity;
	class Node {
		int key;
		int val;
		Node prev;
		Node next;
	}

	public LRUCache(int capacity) {
		hm = new HashMap<>(capacity);
		this.cache_capacity = capacity;
		head.next = tail;
		tail.prev = head;
	}

	public int get(int key) {
		int result = -1;
		Node node = hm.get(key);
		if (node != null) {
			result = node.val;
			remove(node);
			add(node);
		}
		return result;
	}

	public void put(int key, int value) {
		Node node = hm.get(key);
		if (node != null) {
			remove(node);
			node.val = value;

			add(node);

		} else {
			if (hm.size() == cache_capacity) {

				hm.remove(tail.prev.key);
				remove(tail.prev);

			}
			Node new_node = new Node();
			new_node.key = key;
			new_node.val = value;

			hm.put(key, new_node);
			add(new_node);

		}
	}

	public void add(Node node) {
		Node head_next = head.next;
		head.next = node;

		node.prev = head;
		node.next = head_next;
		head_next.prev = node;
	}

	public void remove(Node node) {
		Node next_node = node.next;
		Node pre_node = node.prev;
		next_node.prev = pre_node;
		pre_node.next = next_node;
	}
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
