/*
Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.
*/

class MyHashMap {
  
    public int findHash(int key){
      return key%15000;
    }
    
    private int bucketSize;
    private List<Pair>[] hashMap;
    public MyHashMap() {
        bucketSize = 15000;
        hashMap = new LinkedList[bucketSize];

    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int index = findHash(key);
        if(hashMap[index] == null){
          hashMap[index] = new LinkedList<Pair>();
        }
        List<Pair> pairs = hashMap[index];
        for(Pair pair : pairs){
          if(pair.key == key){
            pair.value = value;
            return;
          }
        }
        Pair p = new Pair(key, value);
      hashMap[index].add(p);
        
        
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int index = findHash(key);
        if(hashMap[index] == null){
          return -1;
        }
        List<Pair> pairs = hashMap[index];
        for(Pair pair : pairs){
          if(pair.key == key){
          
            return pair.value;
          }
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int index = findHash(key);
        if(hashMap[index] == null){
          return;
        }
        List<Pair> pairs = hashMap[index];
       Pair temp=null;
        for(Pair pair : pairs){
          if(pair.key == key){
          
            temp=pair;
            break;
          }
        }
      hashMap[index].remove(temp);
    }
}

