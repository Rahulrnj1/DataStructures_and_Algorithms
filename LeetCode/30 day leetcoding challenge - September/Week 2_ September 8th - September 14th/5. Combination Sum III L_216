https://www.youtube.com/watch?v=rP_K3WJnRR4

/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:
All numbers will be positive integers.
The solution set must not contain duplicate combinations.

Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
*/

class Solution {
    List < List < Integer >> result = new ArrayList();
    public void findCombo(List < Integer > combination, int k, int n, int start) {
        if (k == combination.size()) {
            if (n == 0) {
                result.add(new ArrayList < Integer > (combination)); //This line matters
                return;
            }
        }
        for (int i = start; i <= 9; i++) {
            combination.add(i);
            findCombo(combination, k, n - i, i + 1);
            combination.remove(combination.size() - 1);
        }
    }
    public List < List < Integer >> combinationSum3(int k, int n) {
        List < Integer > combination = new ArrayList < Integer > ();
        findCombo(combination, k, n, 1);
        return result;
    }
}
