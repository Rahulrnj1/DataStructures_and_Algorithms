https://leetcode.com/problems/majority-element-ii/discuss/859574/Java-Concise-Solution

/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]
   Hide Hint #1  
How many majority elements could it possibly have?
Do you have a better hint? Suggest it!
*/

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> ret = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        int threshold = nums.length/3;
        
        for(int i=0; i<nums.length; i++){
            if(map.containsKey(nums[i])) map.put(nums[i], map.get(nums[i])+1);
            else map.put(nums[i],1);
            if(map.get(nums[i]) > threshold && !ret.contains(nums[i])) 
                ret.add(nums[i]);
        }     
        return ret;
    }
}
