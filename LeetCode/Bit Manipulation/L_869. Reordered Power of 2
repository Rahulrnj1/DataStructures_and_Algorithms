https://leetcode.com/problems/reordered-power-of-2/

/*
You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return true if and only if we can do this so that the resulting number is a power of two.

 

Example 1:

Input: n = 1
Output: true
Example 2:

Input: n = 10
Output: false
 

Constraints:

1 <= n <= 109
*/

class Solution {
    public boolean reorderedPowerOf2(int N) {
        String s = String.valueOf(N);
        int[] A = new int[s.length()];
        for(int i=0;i<s.length();i++){
          A[i] = s.charAt(i)-'0';
        }
        return permutations(A, 0);
    }
  
    public boolean permutations(int[] A, int start){
      if(start==A.length){
        return isPowerOfA(A);
      }
       for(int i=start; i<A.length;i++){
         swap(A, i, start);
         if(permutations(A, start+1)){
           return true;
         }
         swap(A, i, start);
       }
      return false;
    }
    
    public boolean isPowerOfA(int[] A){
       if (A[0] == 0) return false;  // no leading zero

        // Build eg. A = [1, 2, 8] -> N = 128
        int N = 0;
        for (int x: A)
            N = 10 * N + x;

        // Remove the largest power of 2
        while (N > 0 && ((N & 1) == 0))
            N >>= 1;

        // Check that there are no other factors besides 2
        return N == 1;
    }
  
    public void swap(int[] A, int i, int j){
      int temp = A[i];
      A[i]=A[j];
      A[j]=temp;
    }
}
