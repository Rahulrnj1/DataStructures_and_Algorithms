https://leetcode.com/problems/4sum/

/*
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109
*/

class Pair{
      int sum;
      int first;
      int sec;
    }
  
class Solution {
  
   
    private boolean noCommon(Pair a, Pair b){
      if (a.first == b.first || a.first == b.sec
        || a.sec == b.first || a.sec == b.sec)
      return false;
 
    return true;
    }
  
    public List<List<Integer>> fourSum(int[] nums, int target) {
      List<List<Integer>> res = new ArrayList();
      HashMap<String, ArrayList<Integer>> hm = new HashMap<>();
        ArrayList<Pair> arr = new ArrayList<>();
        for(int i=0;i<nums.length-1;i++){
          for(int j=i+1; j<nums.length;j++){
            Pair p = new Pair();
            p.sum = nums[i]+nums[j];
            p.first = i;
            p.sec = j;
            arr.add(p);
          }
        }
      Collections.sort(arr, new Comparator<Pair>() {
      // Following function is needed for sorting
      // pairSum array
      public int compare(Pair a, Pair b)
      {
        return (a.sum - b.sum);
      }
    });
      
      int i = 0;
    int j = arr.size() - 1;
    while (i < arr.size() && j >= 0) {
      if ((arr.get(i).sum + arr.get(j).sum == target)
          && noCommon(arr.get(i), arr.get(j))) {
        
        ArrayList<Integer> temp = new ArrayList();
    
        temp.add(nums[arr.get(i).first]);
        temp.add(nums[arr.get(i).sec]);
        temp.add(nums[arr.get(j).first]);
        temp.add(nums[arr.get(j).sec]);
        Collections.sort(temp);
        
        String str = "";

        for(int t : temp){
          str += t;
        }
        
        if(!hm.containsKey(str)){
          hm.put(str, temp);
        }
        i++;
        j--;
      }
      else if ((arr.get(i).sum + arr.get(j).sum) < target)
        i++;
      else
        j--;
    }
      
    for(Map.Entry<String, ArrayList<Integer>> m : hm.entrySet()){
      res.add(m.getValue());
    }
      return res;
  }
    
}
