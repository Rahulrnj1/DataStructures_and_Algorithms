/*
Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100
*/

class Solution {
    public List < Integer > spiralOrder(int[][] matrix) {
        List < Integer > res = new ArrayList();
        int dir = 0;
        int l = 0, t = 0, b = matrix.length - 1, r = matrix[0].length - 1;
        while (t <= b && l <= r) {
            if (dir == 0) {
                for (int i = l; i <= r; i++) {
                    res.add(matrix[t][i]);
                }
                t++;
            } else if (dir == 1) {
                for (int i = t; i <= b; i++) {
                    res.add(matrix[i][r]);
                }
                r--;
            } else if (dir == 2) {
                for (int i = r; i >= l; i--) {
                    res.add(matrix[b][i]);
                }
                b--;
            } else {
                for (int i = b; i >= t; i--) {
                    res.add(matrix[i][l]);
                }
                l++;
            }
            dir = (dir + 1) % 4;
        }
        return res;
    }
}


==================================================


class Solution {
    public int[][] generateMatrix(int n) {
        int curr=1;
        int res[][] = new int[n][n];
        int l=0, r=n-1, t=0, b=n-1, dir=0;
        while(t<=b && l<=r){
            if(dir==0){
                for(int i=l;i<=r;i++){
                    res[t][i]=curr++;
                }
                t++;
            }
            else if(dir==1){
                for(int i=t;i<=b;i++){
                    res[i][r]=curr++;
                }
                r--;
            }
            else if(dir==2){
                for(int i=r;i>=l;i--){
                    res[b][i]=curr++;
                }
                b--;
            }
            else{
                for(int i=b;i>=t;i--){
                    res[i][l]=curr++;
                }
                l++;
            }
            dir=(dir+1)%4;
        }
        return res;
    }
}
