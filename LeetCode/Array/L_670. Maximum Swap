https://leetcode.com/problems/maximum-swap/discuss/1208593/Faster-than-100-oror-Java

/*
You are given an integer num. You can swap two digits at most once to get the maximum valued number.
Return the maximum valued number you can get.

Example 1:
Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.

Example 2:
Input: num = 9973
Output: 9973
Explanation: No swap.
 
Constraints:
0 <= num <= 108
*/

class Solution {
    public int maximumSwap(int num) {
        String numStr = String.valueOf(num);
        int len = numStr.length();
        int[] arr = new int[len];
        int cpy[] = new int[len];
        for (int i = 0; i < len; i++) {
            arr[i] = numStr.charAt(i) - '0';
            cpy[i] = arr[i];
        }


        cpy = Arrays.stream(cpy).boxed()
            .sorted(Collections.reverseOrder())
            .mapToInt(Integer::intValue)
            .toArray();

        int temp = -1;
        for (int i = 0; i < len; i++) {
            if (arr[i] != cpy[i]) {
                temp = arr[i];
                arr[i] = cpy[i];
                for (int j = len - 1; j >= 0; j--) {
                    if (arr[j] == arr[i]) {
                        arr[j] = temp;
                        return makeInt(arr);
                    }
                }
            }
        }
        return num;
    }

    public int makeInt(int[] arr) {
        String s = new String();
        for (int i: arr) {
            s += (char)(i + '0');
        }
        System.out.print(s);
        return Integer.parseInt(s);
    }
}
