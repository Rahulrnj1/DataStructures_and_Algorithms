https://leetcode.com/problems/next-permutation/solution/  -> has open solution

/*
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).
The replacement must be in place and use only constant extra memory.

Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

Example 4:
Input: nums = [1]
Output: [1]

Constraints:
1 <= nums.length <= 100
0 <= nums[i] <= 100
*/

class Solution {
    public void nextPermutation(int[] nums) {
        int point = -1;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                point = i;
                break;
            }
        }

        if (point == -1) {
            reverse(nums, 0, nums.length);
            return;
        }

        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[point] < nums[i]) {
                swap(nums, i, point);
                break;
            }
        } 
        reverse(nums, point + 1, nums.length);

    }
    public void reverse(int[] nums, int start, int end) {
        for (int i = start, j = end - 1; i < j; i++, j--) {
            swap(nums, i, j);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


=============================================================

class Solution {

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int[] nums, int start) {
        int end = nums.length - 1;
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }

    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        
        //find a adjacent pair where right > left element
        while (i >= 0) {
            if (nums[i] < nums[i + 1])
                break;
            i--;
        }
        
        
        //find from last, an element which is greater than current ith element, swap them
        if (i >= 0) {
            int j = nums.length - 1;
            while (nums[i] >= nums[j]) {
                j--;
            }
            swap(nums, i, j);
        }
        
        //reverse after swapping from i+1 to end
        reverse(nums, i + 1);
    }
}
