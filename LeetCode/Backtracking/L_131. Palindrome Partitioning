//https://www.youtube.com/watch?v=WBgsABoClE0

/*
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

*/
Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.

*/


class Solution {
    
    private void partition(int index, String s,  List<List<String>> res, List<String> temp){
        if(index == s.length()){
            res.add(new ArrayList<String>(temp));
            return;
        }
        for(int i=index ;i<s.length();i++){
            if(isPalindrome(s,index,i)){
                temp.add(s.substring(index,i+1));
                partition(i+1,s,res,temp);
                temp.remove(temp.size()-1);
            }
        }
    }
   
    public boolean isPalindrome(String s, int start, int end){
        while(start<end){
            if(s.charAt(start)!=s.charAt(end)){
                return false;
            }
            start++;end--;
        }
        return true;
    }
    
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        partition(0, s, res, temp);
        return res;
    }
}
