https://leetcode.com/problems/subsets-ii/

/*
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
*/

https://www.youtube.com/watch?v=Vn2v6ajA7U0

class Solution {
    
    private void subsetsWithDup(int idx, int[] nums, List<List<Integer>> res, List<Integer> temp){
        if(idx==nums.length)
        {
            res.add(new ArrayList<>(temp));
            return;
        }
        temp.add(nums[idx]);
        subsetsWithDup(idx+1, nums, res, temp);
        temp.remove(temp.size()-1);
        
        while(idx+1<nums.length && nums[idx]==nums[idx+1])
            idx+=1;
        
        subsetsWithDup(idx+1, nums, res, temp);

    }
    
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList();
        List<Integer> temp= new ArrayList();
        subsetsWithDup(0, nums, res, temp);
        return res;
    }
}
