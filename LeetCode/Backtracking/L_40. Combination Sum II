https://leetcode.com/problems/combination-sum-ii/

/*
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 
Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30
*/

https://www.youtube.com/watch?v=G1fRTGRxXU8&t=1705s

class Solution {
    
    public void combinationSum(int idx, int[] candidates, int target, List<Integer> temp, List<List<Integer>> res){
        if(target==0){
            res.add(new ArrayList(temp));
            return;
        }
        for(int i=idx;i<candidates.length;i++){
            if(i>idx && candidates[i]==candidates[i-1])
                continue;
            if(candidates[i]> target)
                break;
            
            temp.add(candidates[i]);
            combinationSum(i+1,candidates,target-candidates[i], temp, res);
            temp.remove(temp.size()-1);
        }
    }
    
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        combinationSum(0,candidates,target, temp, res);
        return res;
    }
}
