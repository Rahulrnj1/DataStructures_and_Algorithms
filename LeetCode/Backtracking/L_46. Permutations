/*
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]
 
Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
*/

//extra space

https://www.youtube.com/watch?v=YK78FU5Ffjw

class Solution {
    
     private void permute(int[] nums,List<Integer> temp,boolean[] freq,List<List<Integer>> res){
        if(temp.size() == nums.length){
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!freq[i]){
                temp.add(nums[i]);
                freq[i]= true;
                permute(nums,temp,freq,res);
                temp.remove(temp.size()-1);
                freq[i]=false;
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList();
        boolean[] freq = new boolean[nums.length];
        permute(nums, temp, freq, res);
        return res;
    }
}

==========================================================================

//less space complexity

//https://www.youtube.com/watch?v=f2ic2Rsc9pU

class Solution {
  
    public void swap(int[] nums, int l, int r){
      int temp=nums[l];
      nums[l]= nums[r];
      nums[r]=temp;
    }
    public void permute(int[] nums, List<List<Integer>> result, int l, int r) {
        if(l==r){
          List<Integer> temp=new ArrayList();
          for(int i:nums){
            temp.add(i);
          }
          result.add(temp);
        }
        for(int i=l;i<=r;i++){
          swap(nums,l,i);
          permute(nums, result,l+1,r);
          swap(nums,l,i);
        }
    }
  
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList();
        permute(nums, result, 0, nums.length-1);
        return result;
    }
}
