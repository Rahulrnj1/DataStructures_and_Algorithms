/*
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

Example 2:
Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

Example 3:
Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 
Constraints:
0 <= n <= 30
*/

class Solution {
    public int fib(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return fib(dp, n);
    }

    public int fib(int[] dp, int n) {
        if (n == 0)
            return 0;
        if (n == 1)
            return 1;
        if (dp[n] != -1)
            return dp[n];
        return fib(n - 1) + fib(n - 2);
    }
}

===================================================

class Solution {
    public int fib(int n) {
        int[] memo = new int[n+1];
        Arrays.fill(memo,-1);
        return fib(n, memo);
    }
    
    public int fib(int n, int[] memo){
        if(memo[n]!=-1)
            return memo[n];
        if(n<2)
            return n;
       return  memo[n] =  fib(n-1) + fib(n-2);
    }
}
