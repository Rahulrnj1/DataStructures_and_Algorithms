https://leetcode.com/problems/combination-sum-iv/discuss/85036/1ms-Java-DP-Solution-with-Detailed-Explanation

/*
Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.
The answer is guaranteed to fit in a 32-bit integer.

Example 1:
Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.


Example 2:
Input: nums = [9], target = 3
Output: 0
 
Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 1000
All the elements of nums are unique.
1 <= target <= 1000
 
Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?
*/

//Recursive:

class Solution {
    public int combinationSum4(int[] nums, int target) {
        if(target==0)
          return 1;
      int res = 0;
      for(int i=0;i<nums.length;i++){
        if(target>=nums[i]){
          res+= combinationSum4(nums, target-nums[i]);
        }
      }
      return res;
    }
}

//Top-down:

class Solution {
  
    private int dp[];
    public int combinationSum4(int[] nums, int target) {
      dp = new int[target+1];
      Arrays.fill(dp, -1);
      dp[0]=1;
      helper(nums, target);
      return dp[target];    
    } 
    
    public int helper(int[] nums, int target){
      if(dp[target]!=-1)
          return dp[target];
      int res = 0;
      for(int i=0;i<nums.length;i++){
        if(target>=nums[i]){
          res+= helper(nums, target-nums[i]);
        }
      }
      return dp[target] = res;
    }
}

//Bottom-up:

class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] comb = new int[target+1];
        comb[0] = 1;
      
        for(int i=1;i<=target;i++){
          for(int j=0;j<nums.length;j++){
            if(i- nums[j] >=0 ){
              comb[i] += comb[i-nums[j]];
            }
          }
        }
      return comb[target];
    }
}
