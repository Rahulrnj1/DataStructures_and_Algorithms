/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Example 3:
Input: digits = "2"
Output: ["a","b","c"]
 
Constraints:
0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].
*/

class Solution {

    List < String > combinations = new ArrayList < > ();
    Map < Character, String > map = new HashMap < > ();
    String phoneDigits;

    public void makeMap() {
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
    }

    public void makeWords(int index, StringBuilder path) {

        if (path.length() == phoneDigits.length()) {
            combinations.add(path.toString());
            return;
        }

        String possibleLetters = map.get(phoneDigits.charAt(index));
        for (char letter: possibleLetters.toCharArray()) {
            path.append(letter);
            makeWords(index + 1, path);
            path.deleteCharAt(path.length() - 1);
        }
    }

    public List < String > letterCombinations(String digits) {
        phoneDigits = digits;
        if (digits.length() == 0) {
            return combinations;
        }
        makeMap();
        makeWords(0, new StringBuilder());
        return combinations;
    }
}


==================================================================================================

//Without global variables

class Solution {

  public void makeMap(Map < Integer, String > map) {
    map.put(2, "abc");
    map.put(3, "def");
    map.put(4, "ghi");
    map.put(5, "jkl");
    map.put(6, "mno");
    map.put(7, "pqrs");
    map.put(8, "tuv");
    map.put(9, "wxyz");
  }

  public void makeLetterCombinations(int index, StringBuilder sb, String digits, Map < Integer, String > map, List < String > res) {
    if (index == digits.length()) {
      res.add(sb.toString());
      return;
    }
    String curr = map.get((int) digits.charAt(index) - '0');
    for (int i = 0; i < curr.length(); i++) {
      sb.append(curr.charAt(i));
      makeLetterCombinations(index + 1, sb, digits, map, res);
      sb.deleteCharAt(sb.length() - 1);
    }
  }

  public List < String > letterCombinations(String digits) {
    List < String > res = new ArrayList < > ();
    if (digits == null || digits.length() == 0)
      return res;
    Map < Integer, String > map = new HashMap < > ();
    makeMap(map);
    makeLetterCombinations(0, new StringBuilder(), digits, map, res);
    return res;
  }
}
