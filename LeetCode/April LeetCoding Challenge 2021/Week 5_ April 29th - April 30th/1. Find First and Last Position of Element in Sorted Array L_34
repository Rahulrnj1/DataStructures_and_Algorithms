/*
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
Follow up: Could you write an algorithm with O(log n) runtime complexity?

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
 
Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
*/

class Solution {

    int res[] = new int[] {
        Integer.MIN_VALUE, Integer.MIN_VALUE
    };
    boolean left = false, right = false;
    public int[] searchRange(int[] nums, int target) {
        searchRange(nums, target, 0, nums.length - 1);
        return res[0] == Integer.MIN_VALUE ? new int[] {-1, -1} : res;
    }


    public int searchRange(int[] nums, int target, int start, int end) {
        System.out.println(" " + start + " " + end + ".");
        if (start > end)
            return Integer.MAX_VALUE;

        int mid = (start + end) / 2;

        if (nums[mid] > target) {
            return searchRange(nums, target, start, mid - 1);
        } else if (nums[mid] < target) {
            return searchRange(nums, target, mid + 1, end);
        } else {
            if (nums[mid] == target) {
                if (res[0] == Integer.MIN_VALUE && left == false) {
                    if (mid - 1 >= 0 && nums[mid - 1] == target) {
                        return searchRange(nums, target, start, mid - 1);
                    }
                    if (left == false) {
                        res[0] = mid;
                        left = true;
                    }
                }
                if (res[1] == Integer.MIN_VALUE && right == false) {
                    if (mid + 1 < nums.length && nums[mid + 1] == target) {
                        {
                            return searchRange(nums, target, mid + 1, nums.length - 1);
                        }
                    }
                    if (right == false) {
                        res[1] = mid;
                        right = true;
                    }
                }

            }

        }
        return mid;
    }
}
