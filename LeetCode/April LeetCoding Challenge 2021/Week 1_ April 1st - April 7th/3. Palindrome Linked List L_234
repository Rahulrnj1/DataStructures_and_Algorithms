/*
Given the head of a singly linked list, return true if it is a palindrome.

Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false
 
Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 
Follow up: Could you do it in O(n) time and O(1) space?
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
      if(head == null || head.next==null)
        return true;
      int length=0;
      ListNode slow=head;
      while(slow!=null){
        length++;
        slow=slow.next;
      }
      
      int arr[] = new int[length/2];
      arr[0] = head.val;
      ListNode  fast =head;
      slow=head;
      int i=1;
      while(fast.next!=null && fast.next.next!=null){
        slow=slow.next;
        if(i<arr.length)
        arr[i++] = slow.val;
        fast= fast.next.next;
      }
    
      i = arr.length - 1;
      slow = slow.next;
        while(slow!=null){
          if(arr[i--] != slow.val)
            return false;
          slow=slow.next;
        
        }
      return true;
    }
}
