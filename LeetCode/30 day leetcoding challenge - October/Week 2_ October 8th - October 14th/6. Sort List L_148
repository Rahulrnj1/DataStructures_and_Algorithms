/*
Given the head of a linked list, return the list after sorting it in ascending order.
Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode getMiddle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public ListNode sortedList(ListNode A, ListNode B) {
        if (A == null)
            return B;
        if (B == null)
            return A;
        ListNode result = null;
        if (A.val < B.val) {
            result = A;
            result.next = sortedList(A.next, B);
        } else {
            result = B;
            result.next = sortedList(A, B.next);
        }
        return result;
    }
    
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode middle = getMiddle(head);
        ListNode next = middle.next;
        middle.next = null;
        ListNode left = sortList(head);
        ListNode right = sortList(next);
        return sortedList(left, right);
    }
}

=====================================================================================

class Solution {
  
    public ListNode sortListHelper(ListNode p, ListNode q){
      if(p == null)
        return q;
      
      if(q==null)
        return p;
      
      ListNode sort=null;
      if(p.val<=q.val){
        sort=p;
        p=p.next;
      }
      else{
        sort=q;
        q=q.next;
      }
      
      ListNode root = sort;
      
      while(p!=null && q!=null){
        if(p.val<=q.val){
          sort.next=p;
          p=p.next;
          sort=sort.next;
        }
        else{
          sort.next=q;
          q=q.next;
          sort=sort.next;
        }
      }
      if(p!=null)
        sort.next=p;
      
      if(q!=null)
        sort.next=q;
      
      return root;
    }
  
    public ListNode sortList(ListNode head) {
      
        if(head==null || head.next==null)
          return head;
      
        ListNode mid = getMid(head);
        ListNode next = mid.next;
        mid.next=null;
        ListNode left = sortList(head);
        ListNode right = sortList(next);
        
        return sortListHelper(left, right);
      
    }
  
  public ListNode getMid(ListNode node){
    ListNode fast=node, slow=node;
    while(fast.next!=null && fast.next.next!=null){
      fast=fast.next.next;
      slow=slow.next;
    }
    return slow;
  }
}
