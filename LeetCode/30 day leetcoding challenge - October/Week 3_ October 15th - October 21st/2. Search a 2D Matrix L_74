/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13
Output: false

Example 3:
Input: matrix = [], target = 0
Output: false

Constraints:
m == matrix.length
n == matrix[i].length
0 <= m, n <= 100
-104 <= matrix[i][j], target <= 104
*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return false;
        int j = matrix[0].length - 1;
        for (int i = 0; i < matrix.length; i++) {
            if (target >= matrix[i][0] && target <= matrix[i][j]) {
                int k = 0;
                while (target != matrix[i][k] && k <= j && target > matrix[i][k]) {
                    k++;
                }
                return target == matrix[i][k] ? true : false;
            }
        }
        return false;
    }
}

============================================================================================================

//With binary search

class Solution {
    public boolean binarySearch(int[][] matrix, int target, int i, int start, int end) {
        if (start > end)
            return false;
        int mid = (start + end) / 2;
        if (matrix[i][mid] == target)
            return true;
        else if (matrix[i][mid] < target) {
            return binarySearch(matrix, target, i, mid + 1, end);
        } else {
            return binarySearch(matrix, target, i, start, mid - 1);
        }
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int i = 0, j = matrix[0].length - 1;
        int m = matrix.length, n = matrix[0].length;
        while (i < m) {
            if (target >= matrix[i][0] && target <= matrix[i][j]) {
                return binarySearch(matrix, target, i, 0, j);
            }
            i++;
        }
        return false;
    }
}
