/*
Design an Iterator class, which has:

A constructor that takes a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
A function next() that returns the next combination of length combinationLength in lexicographical order.
A function hasNext() that returns True if and only if there exists a next combination.
 

Example:

CombinationIterator iterator = new CombinationIterator("abc", 2); // creates the iterator.

iterator.next(); // returns "ab"
iterator.hasNext(); // returns true
iterator.next(); // returns "ac"
iterator.hasNext(); // returns true
iterator.next(); // returns "bc"
iterator.hasNext(); // returns false
 

Constraints:

1 <= combinationLength <= characters.length <= 15
There will be at most 10^4 function calls per test.
It's guaranteed that all calls of the function next are valid.
   Hide Hint #1  
Generate all combinations as a preprocessing.
   Hide Hint #2  
Use bit masking to generate all the combinations.
*/

class CombinationIterator {


    Queue < String > q;
    public CombinationIterator(String characters, int combinationLength) {
        q = new LinkedList < > ();
        combinations(characters, 0, combinationLength, q, "");
    }

    public void combinations(String characters, int start, int k, Queue < String > q, String soFar) {
        if (k == 0) {
            q.add(soFar);
            return;
        }

        for (int i = start; i < characters.length(); i++) {
            combinations(characters, i + 1, k - 1, q, soFar + characters.charAt(i));

        }
    }

    public String next() {
        return q.poll();
    }

    public boolean hasNext() {
        return !(q.isEmpty());
    }
}

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator obj = new CombinationIterator(characters, combinationLength);
 * String param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
