/*
Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:
Given 1->2->3->4, reorder it to 1->4->2->3.

Example 2:
Given 1->2->3->4->5, reorder it to 1->5->2->4->3.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
class Solution {
    int count = 0;
    boolean flag = false;
    public void reorderList(ListNode head) {
        reorderList(head, head);

    }

    public void reorderList(ListNode root, ListNode head) {
        if (root == null) {
            return;
        }
        
        reorderList(root.next, head);

        //To stop processing any further calling execution
        if (flag == true)
            return;

        int temp = count;
        while (head != null && temp > 0) {
            head = head.next;
            temp--;
        }

        //if all elements are processed, return
        if (root == head) {
            root.next = null;
            flag = true;
            return;
        }

        //adjusting the 2 nodes
        ListNode next = head.next;
        if (root == next) {
            root.next = null;
            flag = true;
            return;
        }
        head.next = root;
        root.next = next;

        //moving head to correct position to append the current root element
        count += 2;
    }
}
