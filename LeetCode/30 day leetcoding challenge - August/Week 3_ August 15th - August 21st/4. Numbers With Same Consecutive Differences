https://www.youtube.com/watch?v=TAfXh2l9FyA

/*
Return all non-negative integers of length N such that the absolute difference between every two consecutive digits is K.
Note that every number in the answer must not have leading zeros except for the number 0 itself. For example, 01 has one leading zero and is invalid, but 0 is valid.
You may return the answer in any order.

Example 1:
Input: N = 3, K = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.

Example 2:
Input: N = 2, K = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
 
Note:
1 <= N <= 9
0 <= K <= 9
*/

class Solution {
    public void dfs(int lastDigit, int N, int k, ArrayList < Integer > result) {
        if (N == 0) {
            result.add(lastDigit);
            return;
        }
        int num = lastDigit % 10;
        if (num >= k) {
            dfs(lastDigit * 10 + num - k, N - 1, k, result);
        }
        if (k > 0 && num + k < 10) {
            dfs(lastDigit * 10 + num + k, N - 1, k, result);
        }
    }
    public int[] numsSameConsecDiff(int N, int K) {
        ArrayList < Integer > result = new ArrayList();
        if (N == 1) {
            result.add(0);
        }
        for (int i = 1; i < 10; i++) {
            dfs(i, N - 1, K, result);
        }
        return result.stream().mapToInt(i - > i).toArray();
    }
}
