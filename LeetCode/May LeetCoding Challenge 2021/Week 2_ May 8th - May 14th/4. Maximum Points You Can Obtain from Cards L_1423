https://www.youtube.com/watch?v=lmHMhe9GtA8

https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/discuss/1202361/Java-Easy-solution-Minimum-subarray-Sum-explained

//find minimum sum subset of length (length-k), subtract it from total and get your answer

/*
There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.
In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.
Your score is the sum of the points of the cards you have taken.
Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

Example 1:
Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.

Example 2:
Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.

Example 3:
Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.

Example 4:
Input: cardPoints = [1,1000,1], k = 1
Output: 1
Explanation: You cannot take the card in the middle. Your best score is 1. 

Example 5:
Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3
Output: 202
 
Constraints:
1 <= cardPoints.length <= 10^5
1 <= cardPoints[i] <= 10^4
1 <= k <= cardPoints.length

Hint #1  
Let the sum of all points be total_pts. You need to remove a sub-array from cardPoints with length n - k.

Hint #2  
Keep a window of size n - k over the array. The answer is max(answer, total_pts - sumOfCurrentWindow)
*/

//Brute-force

class Solution {
  
    int res = 0;
    public int maxScore(int[] cardPoints, int k) {
       return max(cardPoints, k, 0, cardPoints.length-1);
    }
  
    public int max(int[] cardPoints, int k, int l , int r){
      if(k==0)
        return 0;
      
      int left = cardPoints[l] + max(cardPoints, k-1, l+1, r);
      int right = cardPoints[r] + max(cardPoints, k-1, l, r-1);
      
      return Math.max(left, right);
    }
}

//Working and Fast

class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int minSum = Integer.MAX_VALUE, total = 0;
        int left = 0, currSum = 0, subLen = cardPoints.length - k;
        for(int i=0; i<cardPoints.length ; i++){
          total += cardPoints[i];
          currSum+=cardPoints[i];
          if(i-left+1 == subLen){
            minSum = Math.min(minSum, currSum);
            currSum-=cardPoints[left];
            left++;
          }
        }
      return total - (minSum == Integer.MAX_VALUE ? 0 : minSum); 
    }
}

====================================================================

//slidng window - easy

https://www.youtube.com/watch?v=TsA4vbtfCvo

class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int sum = 0, result=0;
      
        for(int i=cardPoints.length-k;i<cardPoints.length;i++){
          sum+=cardPoints[i];
        }
        
        result = sum;
      
        for(int i=0, j=cardPoints.length-k ; j<cardPoints.length;i++,j++){
          sum -= cardPoints[j];
          sum += cardPoints[i];
          result = Math.max(sum, result);
        }
      
      return result;
    }
}

===============================================================

//sliding window - easiest as per youtube video

find n-k size window which has minimum sum, asnwer is totalSum- minimum sum

class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int sum = 0, totSum = 0;
        for(int i=0;i<cardPoints.length;i++){
            if(i<cardPoints.length-k)
                sum += cardPoints[i];
            totSum += cardPoints[i];
        }
        
        int minSum = sum;
        
        for(int i=0, j= cardPoints.length -k ; j<cardPoints.length ; i++, j++){
            sum -= cardPoints[i];
            sum += cardPoints[j];
            minSum = Math.min(sum, minSum);
        }
        return totSum-minSum;        
    }
}

========================================================================================

class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int sum = 0, result=0;
      
        for(int i=cardPoints.length-k;i<cardPoints.length;i++){
          sum+=cardPoints[i];
        }
        
        result = sum;
      
        for(int i=0, j=cardPoints.length-k ; j<cardPoints.length;i++,j++){
          sum -= cardPoints[j];
          sum += cardPoints[i];
          result = Math.max(sum, result);
        }
      
      return result;
    }
}
