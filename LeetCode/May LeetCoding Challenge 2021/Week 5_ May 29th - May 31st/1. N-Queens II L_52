/*
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return the number of distinct solutions to the n-queens puzzle.

Example 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.

Example 2:
Input: n = 1
Output: 1
 
Constraints:
1 <= n <= 9
*/

class Solution {

  int res = 0;

  public int totalNQueens(int n) {
    int[][] arr = new int[n][n];
	//call helper function
    nQueens(0, arr, n);
    return res;
  }

//check if its safe to place queen at this index in maze
  public boolean isSafe(int[][] arr, int row, int col) {
    int n = arr.length;

    for (int i = 0; i < n; i++) {
      if (arr[row][i] == 1) {
        return false;
      }
      if (arr[i][col] == 1)
        return false;
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n; i++, j++) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i--, j++) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i++, j--) {
      if (arr[i][j] == 1)
        return false;
    }
    return true;
  }

//find all nqueen cominations, increment res on finding each solution
  public boolean nQueens(int row, int[][] arr, int n) {
  //if all rows are filled, we have found a sol, so increment res
    if (row >= n) {
      res += 1;
      return true;
    }

	//for current row, try placing queen in all columns
    for (int col = 0; col < n; col++) {
      if (isSafe(arr, row, col)) {
        arr[row][col] = 1;
		//If queen is placed for this row, try placing queen in next row
        if (nQueens(row + 1, arr, n)) {}
		
		//backtrack
        arr[row][col] = 0;
      }

    }
    return false;
  }
}
