/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, and /. Each operand may be an integer or another expression.
Note that division between two integers should truncate toward zero.
It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

Example 1:
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 
Constraints:
1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].
*/

class Solution {
    public int evalRPN(String[] tokens) {
      Stack<String> st = new Stack<>();
      for(String token: tokens){
        if(token.equals("+") || token.equals("-") || token.equals("/") || token.equals("*")){
          int a = Integer.parseInt(st.pop());
          int b = Integer.parseInt(st.pop());
          if(token.equals("+"))
            st.push(String.valueOf(a+b));
          if(token.equals("-"))
            st.push(String.valueOf(b-a));
          if(token.equals("/"))
            st.push(String.valueOf(b/a));
          if(token.equals("*"))
            st.push(String.valueOf(a*b));
        }
        else{
          st.push(token);
        }
      }
      return Integer.parseInt(st.pop());
    }
}

==============================================================================


class Solution {

//Function to calculate an operation
  private int calOpration(int a, int b, String op) {
    if (op.equals("+")) {
      return a + b;
    } else if (op.equals("-")) {
      return a - b;
    } else if (op.equals("*")) {
      return a * b;
    } else {
      return a / b;
    }
  }

//Funtion to check if a string is an operator
  private boolean isOperator(String s) {
    return s.equals("+") || s.equals("-") || s.equals("/") || s.equals("*");
  }

  public int evalRPN(String[] tokens) {
    Stack < String > st = new Stack < > ();
	
	//Going through array from right to left
    for (int i = tokens.length - 1; i >= 0; i--) {
	
	//If current token is an operator or top of stack is an operator, push the token to stack
      if (isOperator(tokens[i]) || (!st.isEmpty() && isOperator(st.peek()))) {
        st.push(tokens[i]);
      } else {
	  
		//If we have an int on top of stack and current token is also int, we pop one int from top and one operator(second pop will give an operator guaranteed) , do the operation, do it while the top is an int ( example -> curr token = 9, stack (3, +, -11, *))
        int curr = Integer.parseInt(tokens[i]);
        while (!st.isEmpty() && !isOperator(st.peek())) {
          int temp = Integer.parseInt(st.pop());
          curr = calOpration(curr, temp, st.pop());
        }
		//When stack top doesn't have int anymore, push the current calculated value
        st.push(String.valueOf(curr));
      }
    }
	//In end, we can either have stack size either 3 or 1, calculate the result accordingly and return
    if (st.size() > 1) {
      int temp = Integer.parseInt(st.pop());
      int temp2 = Integer.parseInt(st.pop());
      return calOpration(temp, temp2, st.pop());
    }
    return Integer.parseInt(st.pop());
  }
}
