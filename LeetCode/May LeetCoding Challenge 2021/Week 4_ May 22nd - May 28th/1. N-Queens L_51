/*
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]]
 
Constraints:
1 <= n <= 9
*/

class Solution {

  //Create result variable to return
  List < List < String >> res = new ArrayList();

  public List < List < String >> solveNQueens(int n) {

    //Create an array to place queens
    int[][] arr = new int[n][n];
    nQueens(0, arr, n, new ArrayList < String > ());
    return res;
  }

  //Function to check, if another queen exist in same row, same column or same diagonal, is yes return false, else return true
  public boolean isSafe(int[][] arr, int row, int col) {
    int n = arr.length;

    for (int i = 0; i < n; i++) {
      if (arr[row][i] == 1) {
        return false;
      }
      if (arr[i][col] == 1)
        return false;
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n; i++, j++) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i--, j++) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i++, j--) {
      if (arr[i][j] == 1)
        return false;
    }
    return true;
  }

  public boolean nQueens(int row, int[][] arr, int n, List < String > s) {
    //If we placed queens in all rows, it means we have a answer , so just add that to res variable
    if (row >= n) {
      res.add(new ArrayList < String > (s));
      return true;
    }

    //For current row, try to place queen in all columns 
    for (int col = 0; col < n; col++) {

      if (isSafe(arr, row, col)) {
        //If it is safe to place queen in this col in current row,add this to List s

        String temp = new String();
        for (int i = 0; i < n; i++) {
          if (i == col) {
            temp += "Q";
          } else {
            temp += ".";
          }
        }
        s.add(temp);
        arr[row][col] = 1;

        //If it is safe to place queen in this col in current row, try to place queen in next row
        if (nQueens(row + 1, arr, n, s)) {}
        //When all rows are done, remove the Queen in last row,last String from Lst s and try for other combinations
        s.remove(s.size() - 1);
        arr[row][col] = 0;
      }

    }
    return false;
  }
}

=====================================================================

class Solution {

    List < List < String >> res = new ArrayList();

    public List < List < String >> solveNQueens(int n) {
        int[][] arr = new int[n][n];
        nQueens(0, arr, n, new ArrayList < String > ());
        return res;
    }


    public boolean isSafe(int[][] arr, int row, int col) {
        int n = arr.length;

        for (int i = 0; i < n; i++) {
            if (arr[row][i] == 1) {
                return false;
            }
            if (arr[i][col] == 1)
                return false;
        }
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (arr[i][j] == 1)
                return false;
        }
        for (int i = row, j = col; i < n && j < n; i++, j++) {
            if (arr[i][j] == 1)
                return false;
        }
        for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i--, j++) {
            if (arr[i][j] == 1)
                return false;
        }
        for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i++, j--) {
            if (arr[i][j] == 1)
                return false;
        }
        return true;
    }

    public boolean nQueens(int row, int[][] arr, int n, List < String > s) {
        if (row >= n) {
            List < String > x = new ArrayList < > ();
            for (String str: s) {
                x.add(str);
            }
            res.add(x);
            return true;
        }

        for (int col = 0; col < n; col++) {
            if (isSafe(arr, row, col)) {

                String temp = new String();
                for (int i = 0; i < n; i++) {
                    if (i == col) {
                        temp += "Q";
                    } else {
                        temp += ".";
                    }
                }
                s.add(temp);
                arr[row][col] = 1;
                nQueens(row + 1, arr, n, s);

                s.remove(s.size() - 1);
                arr[row][col] = 0;
            }

        }
        return false;
    }
}
