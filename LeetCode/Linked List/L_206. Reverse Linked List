/*
Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL

Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both?
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr=head, next=null, prev=null;
        while(curr!=null){
          next=curr.next;
          curr.next=prev;
          prev=curr;
          curr=next;
        }
      return prev;
    }
}

===================================================================

//recursion 

class Solution {
    ListNode temp;
    
    public void reverseList(ListNode prev, ListNode curr){
        if(curr.next==null){
            temp=curr;
            curr.next=prev;
            prev.next=null;
          
            return;
            
        }
        reverseList(curr, curr.next);
        curr.next= prev;
     
    }
    
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null)
            return head;
        reverseList(null, head);
        return temp;
    }
}

//recursion 2

class Solution {
    
    public ListNode reverseList(ListNode head, ListNode newh){
        if(head == null){
            return newh;
        }
        ListNode next = head.next;
        head.next = newh;
        return reverseList(next, head);
     
    }
    
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null)
            return head;
        return reverseList(head, null);
    }
}
