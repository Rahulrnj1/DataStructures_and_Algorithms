/*
Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Example 3:
Input: l1 = [], l2 = [0]
Output: [0]

Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res = null;
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        if (l1.val < l2.val) {
            res = l1;
            res.next = mergeTwoLists(l1.next, l2);
        } else {
            res = l2;
            res.next = mergeTwoLists(l1, l2.next);
        }
        return res;
    }
}

===========================================================

class Solution {
    
    public void mergeTwoLists(ListNode temp, ListNode l1, ListNode l2){
        if(l1 == null){
            temp.next = l2;
            return;
        }
        if(l2 == null){
            temp.next = l1;
            return;
        }
        if(l1.val < l2.val){
            temp.next = new ListNode(l1.val);
            temp = temp.next;
            l1 = l1.next;
        }
        else{
            temp.next = new ListNode(l2.val);
            temp = temp.next;
            l2 = l2.next;
        }
        mergeTwoLists(temp, l1, l2);
    }
    
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head = null;
        ListNode temp = new ListNode();
        head = temp;
        if(list1 == null)
            return list2;
        if (list2 == null)
            return list1;
        if(list1.val < list2.val){
            temp.val = list1.val;
            list1 = list1.next;
        }
        else
        {
            temp.val = list2.val;
            list2=list2.next;
        }
        mergeTwoLists(temp, list1, list2);
        return head;
    }
}
