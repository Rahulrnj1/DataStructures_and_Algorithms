https://www.youtube.com/watch?v=J2X70jj_I1o&list=PL_z_8CaSLPWdeOezg68SKkeLN4-T_jNHd&index=7&pbjreload=102

/*
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.

Example:
Input: [2,1,5,6,2,3]
Output: 10
*/

 class Solution {
     static class Pair {
         int first;
         int second;

         Pair(int first, int second) {
             this.first = first;
             this.second = second;
         }
     }

     static int[] findRight(int[] arr) {
         Stack < Pair > st = new Stack < > ();
         int res[] = new int[arr.length];
         for (int i = arr.length - 1; i >= 0; i--) {
             if (st.isEmpty()) {
                 res[i] = arr.length;

             } else if (st.peek().first < arr[i]) {
                 res[i] = st.peek().second;

             } else if (st.peek().first > arr[i]) {
                 while (!st.isEmpty() && st.peek().first > arr[i]) {
                     st.pop();
                 }
                 if (st.isEmpty()) {
                     res[i] = arr.length;
                 } else
                     res[i] = st.peek().second;
             }
             st.push(new Pair(arr[i], i));
         }
         return res;

     }

     static int[] findLeft(int[] arr) {
         Stack < Pair > st = new Stack < > ();
         int res[] = new int[arr.length];
         for (int i = 0; i < arr.length; i++) {
             if (st.isEmpty()) {
                 res[i] = -1;

             } else if (st.peek().first < arr[i]) {
                 res[i] = st.peek().second;

             } else if (st.peek().first > arr[i]) {
                 while (!st.isEmpty() && st.peek().first > arr[i]) {
                     st.pop();
                 }
                 if (st.isEmpty()) {
                     res[i] = -1;
                 } else
                     res[i] = st.peek().second;
             }
             st.push(new Pair(arr[i], i));
         }
         return res;

     }

     public int largestRectangleArea(int[] heights) {
         int left[] = findLeft(heights);
         int right[] = findRight(heights);
         int ans = Integer.MIN_VALUE;
         for (int i = 0; i < heights.length; i++) {
             ans = Math.max(ans, (right[i] - left[i] - 1) * heights[i]);
         }
         return ans;
     }
 }
