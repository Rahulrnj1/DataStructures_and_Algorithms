/*
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //Non-Optimal Solution
 
class Solution {

    public int height(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int lH = height(root.left);
        int rH = height(root.right);
        return lH < rH ? rH + 1 : lH + 1;
    }
    
    public int diameterOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int lheight = height(root.left);
        int rheight = height(root.right);
        return Math.max(Math.max(diameterOfBinaryTree(root.left), diameterOfBinaryTree(root.right)), lheight + rheight);

    }
}

//Optimal Solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Height {
    int h;
}
class Solution {

    public int diameterOfBinaryTree(TreeNode root, Height height) {

        if (root == null) {
            height.h = 0;
            return 0;
        }

        Height lh = new Height();
        Height rh = new Height();

        int ldiameter = diameterOfBinaryTree(root.left, lh);
        int rdiameter = diameterOfBinaryTree(root.right, rh);

        height.h = lh.h > rh.h ? lh.h + 1 : rh.h + 1;

        return Math.max(rh.h + lh.h, Math.max(ldiameter, rdiameter));
    }
    
    public int diameterOfBinaryTree(TreeNode root) {
        return diameterOfBinaryTree(root, new Height());
    }
}
