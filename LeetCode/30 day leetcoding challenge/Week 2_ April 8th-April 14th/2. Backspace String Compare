/*
Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Example 1:
Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".

Example 2:
Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".

Example 3:
Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".

Example 4:
Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".

Note:
1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.

Follow up:
Can you solve it in O(N) time and O(1) space?
*/

class Solution {
  
    static String removeBackSpaces(String str, int n)
    {
      Stack<Character> st=new Stack<Character>();
      for(int i=0;i<n;i++)
      {
        if(str.charAt(i)=='#')
        {
          if(!st.isEmpty()){
            st.pop();
          }
        }
        else
        {
          st.push(str.charAt(i));
        }
      }
      StringBuilder sb=new StringBuilder();
      while(!st.isEmpty()){
        sb.append(st.pop());
      }
      return sb.reverse().toString();
    }
    
    public boolean backspaceCompare(String S, String T) {
    S= removeBackSpaces(S, S.length());
    T= removeBackSpaces(T, T.length());
    return S.equals(T);      
    }
}


/*
Follow up:
Can you solve it in O(N) time and O(1) space?
*/

class Solution {
  
    static String removeBackSpaces(String str, int n)
    {       
      StringBuilder s= new StringBuilder(str);
      for(int i=0;i<n;i++)
      {
        if(s.charAt(i)=='#')
        {
          if(i==0)
          {
            s=s.delete(0,1);
            i--;
          }
          else
          {
            s=s.delete(i-1,i+1); 
             i=i-2;
          } 
        } 
        n=s.length();
      }
      return s.toString();
    }
    public boolean backspaceCompare(String S, String T) {
    S= removeBackSpaces(S, S.length());
    T= removeBackSpaces(T, T.length());
    return S.equals(T);      
    }
}

------------------------------------------------------------------------


class Solution {
    public boolean backspaceCompare(String S, String T) {
        return build(S).equals(build(T));
    }

    public String build(String S) {
        Stack<Character> ans = new Stack();
        for (char c: S.toCharArray()) {
            if (c != '#')
                ans.push(c);
            else if (!ans.empty())
                ans.pop();
        }
        return String.valueOf(ans);
    }
}
