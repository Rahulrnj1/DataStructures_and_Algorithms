/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
*/

class Solution {

    public int binarySearch(int[] nums, int start, int end, int target) {
        if (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] == target)
                return mid;
            else if (nums[start] <= nums[mid]) {
                if (target >= nums[start] && target <= nums[mid]) {
                    return binarySearch(nums, 0, mid - 1, target);
                } else {
                    return binarySearch(nums, mid + 1, end, target);
                }
            } else {
                if (target >= nums[mid] && target <= nums[end]) {
                    return binarySearch(nums, mid + 1, end, target);
                } else {
                    return binarySearch(nums, start, mid - 1, target);
                }
            }
        }
        return -1;
    }
    public int search(int[] nums, int target) {
        return binarySearch(nums, 0, nums.length - 1, target);
    }
}

======================================================================

   public int search(int[] nums, int target) {
   // find the index of smallest element in O(log n) time
        int k = findSmallestIndex(nums, 0, nums.length-1);
		// binary search in both arrays in O(log n) time
        int i = Arrays.binarySearch(nums, 0, k, target);
        if (i >= 0) {
            return i;
        }
        int j = Arrays.binarySearch(nums, k, nums.length, target);
        if (j >= 0) {
            return j;
        }
        return  -1;
    }

    int findSmallestIndex(int[] a, int s, int e) {
	//exit case: single element
        if (s == e) {
            return s;
        }
        int m = (s + e) / 2;
		// middle larger than last element, smallest element must be right of middle
        if (a[m] > a[e]) {
            return findSmallestIndex(a, m + 1, e);
        } else {
				// middle <= last element, smallest element must be left of middle or might be middle
            return findSmallestIndex(a, s, m);
        }
    }

=============================================================================

class Solution {
  public int search(int[] nums, int target) {
    int start = 0, end = nums.length - 1;
    while (start <= end) {
      int mid = start + (end - start) / 2;
      if (nums[mid] == target) return mid;
      else if (nums[mid] >= nums[start]) {
        if (target >= nums[start] && target < nums[mid]) end = mid - 1;
        else start = mid + 1;
      }
      else {
        if (target <= nums[end] && target > nums[mid]) start = mid + 1;
        else end = mid - 1;
      }
    }
    return -1;
  }
}
