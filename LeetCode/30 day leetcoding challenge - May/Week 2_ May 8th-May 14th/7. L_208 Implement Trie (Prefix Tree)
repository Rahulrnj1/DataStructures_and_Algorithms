/*
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
*/

class Trie {

    /** Initialize your data structure here. */
    Node curr = new Node(' ');

    class Node {
        boolean isEnd;
        char ch;
        Node[] arr = new Node[26];
        public Node(char ch) {
            this.ch = ch;
        }

    }
    public Trie() {

    }

    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node root = curr;
        for (char c: word.toCharArray()) {
            int index = c - 'a';
            if (root.arr[index] == null)
                root.arr[index] = new Node(c);
            root = root.arr[index];
        }
        root.isEnd = true;

    }

    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node root = curr;
        for (char c: word.toCharArray()) {
            if (root.arr[c - 'a'] != null)
                root = root.arr[c - 'a'];
            else
                return false;
        }
        return root.isEnd;

    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node root = curr;
        for (char c: prefix.toCharArray()) {
            if (root.arr[c - 'a'] != null)
                root = root.arr[c - 'a'];
            else
                return false;
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
