https://leetcode.com/problems/majority-element/solution/

/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2
*/

class Solution {
    public int majorityElement(int[] nums) {
        HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
        for (int i: nums) {
            int f = hm.getOrDefault(i, 0);
            if (f + 1 > nums.length / 2)
                return i;
            hm.put(i, f + 1);
        }
        return 0;
    }
}

================================================

class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length == 0)
          return 0;
        int candidate = 0;
        int count=0;
        for(int i=0;i<nums.length;i++){
          if(count==0){
            candidate = nums[i];
          }
          count += candidate == nums[i] ? 1 : -1;
        }
      return candidate;
    }
}
