/*
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.
*/

class Solution {
    public int firstUniqChar(String str) {
        if (str.length() == 1)
            return 0;
        int i;
        char[] ch = str.toCharArray();
        Arrays.sort(ch);
        String s = new String(ch);
        ArrayList < Character > li = new ArrayList < Character > ();
        for (i = 0; i < s.length(); i++) {
            if (i == 0) {
                if (s.charAt(i) != s.charAt(i + 1)) {
                    li.add(s.charAt(i));
                }
            } else if (i == s.length() - 1) {
                if (s.charAt(i) != s.charAt(i - 1)) {
                    li.add(s.charAt(i));
                }
            } else if (s.charAt(i) != s.charAt(i - 1) && s.charAt(i) != s.charAt(i + 1)) {
                li.add(s.charAt(i));
            }
        }
        if (li.size() == 0)
            return -1;
        int index = str.indexOf(li.get(0));
        for (int e: li) {
            index = Math.min(index, str.indexOf(e));
        }
        return index;
    }
}


====================================================================

https://leetcode.com/problems/first-unique-character-in-a-string/solution/

class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer>  hm = new HashMap<>();
        for(char c: s.toCharArray()){
            hm.put(c, hm.getOrDefault(c,0)+1);
        }
        for(int i=0;i<s.length();i++){
            if(hm.get(s.charAt(i)) == 1)
                return i;
        }
        return -1;
    }
}
