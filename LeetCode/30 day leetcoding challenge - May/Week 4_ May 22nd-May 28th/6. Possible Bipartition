/*
Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.

Each person may dislike some other people, and they should not go into the same group. 

Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.

Return true if and only if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]
Example 2:

Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 

Note:

1 <= N <= 2000
0 <= dislikes.length <= 10000
1 <= dislikes[i][j] <= N
dislikes[i][0] < dislikes[i][1]
There does not exist i != j for which dislikes[i] == dislikes[j].
*/


//Doesn't do backtracking

class Solution {

    //find the hashset
    
    public static int findPlace(int dislike, HashSet < Integer > one, HashSet < Integer > two) {
        if (one.contains(dislike))
            return 0;
        else if (two.contains(dislike))
            return 1;
        return -1;
    }

    public boolean possibleBipartition(int N, int[][] dislikes) {
        HashSet < Integer > one = new HashSet < Integer > ();
        HashSet < Integer > two = new HashSet < Integer > ();
        
        //Adding values in hashSet
        
        for (int i = 0; i < dislikes.length; i++) {
            if (dislikes[i][0] == dislikes[i][1])
                return false;
            int l = findPlace(dislikes[i][0], one, two);
            int r = findPlace(dislikes[i][1], one, two);
            if (l == -1 && r == -1) {
                one.add(dislikes[i][0]);
                two.add(dislikes[i][1]);
            } else if (l == -1 || r == -1) {
                if (l == 0) {
                    two.add(dislikes[i][1]);
                } else if (l == 1) {

                    one.add(dislikes[i][1]);
                } else if (r == 0) {
                    two.add(dislikes[i][0]);
                } else if (r == 1) {
                    one.add(dislikes[i][0]);
                }
            } else if (l == r) {
                return false;
            }
        }
        return true;
    }
}
