/*
We have a list of points on the plane.  Find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance.)
You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

Example 1:
Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].

Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)

Note:
1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000
*/

class Solution {
    public int[][] kClosest(int[][] points, int K) {
        HashMap < Integer, ArrayList < int[] >> hm = new HashMap < Integer, ArrayList < int[] >> ();
        ArrayList < int[] > li;
        
        //Making hashMap for all distances available
        
        for (int i = 0; i < points.length; i++) {
            int key = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            li = hm.containsKey(key) ? hm.get(key) : new ArrayList < int[] > ();
            li.add(points[i]);
            hm.put(key, li);
        }
        
        //Adding distances in heap for finding k smallest efficiently
        
        PriorityQueue < Integer > pq = new PriorityQueue < Integer > ();
        for (Map.Entry < Integer, ArrayList < int[] >> m: hm.entrySet()) {
            pq.add(m.getKey());
        }

        //Adding k smallest in the result array to return
        
        int result[][] = new int[K][2];
        int index = 0;
        while (K > 0) {
            int key = pq.poll();
            li = hm.get(key);
            if (li.size() <= K) {
                for (int i = 0; i < li.size(); i++) {
                    result[index++] = li.get(i);
                }
                K -= li.size();
            } else {
                for (int i = 0; K > 0 && i < li.size(); i++, K--) {
                    result[index++] = li.get(i);
               }
            }
        }
        return result;
    }
}
