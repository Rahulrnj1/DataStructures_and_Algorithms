/*
Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

Example 1:

Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3
Example 2:

Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10
Example 3:

Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4
Example 4:

Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3
Example 5:

Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1
 

Note:

-30000 <= A[i] <= 30000
1 <= A.length <= 30000
   Hide Hint #1  
For those of you who are familiar with the Kadane's algorithm, think in terms of that. For the newbies, Kadane's algorithm is used to finding the maximum sum subarray from a given array. This problem is a twist on that idea and it is advisable to read up on that algorithm first before starting this problem. Unless you already have a great algorithm brewing up in your mind in which case, go right ahead!

Hide Hint #2  
What is an alternate way of representing a circular array so that it appears to be a straight array? Essentially, there are two cases of this problem that we need to take care of. Let's look at the figure below to understand those two cases:

   Hide Hint #3  
The first case can be handled by the good old Kadane's algorithm. However, is there a smarter way of going about handling the second case as well?
*/

//fails for 10 test cases 

class Solution{
public int maxSubarraySumCircular(int[] A) {
      int curr=A[0];
      int max = A[0];
     
      HashSet<Integer> hs = new HashSet<Integer>();
      
      boolean flag= false;
      int currIndex = 0;
      hs.add(currIndex);
        for(int i=1 ; i<A.length ; i++)
      {
        //after rotation
        if(flag==true)
        {
          if(currIndex ==0)
          {
            break;
          }
          if(currIndex==i)
            break;
        }
        
        if(curr+A[i]<= A[i])
        {
          currIndex=i;
          if(hs.contains(i))
            break;
          hs.add(currIndex);
        }
        
        // main logic
        curr = Math.max(curr+A[i], A[i]);
        max = Math.max(curr, max);
        
        //setting i again
        if(i==A.length-1)
        { i=-1;
         flag=true;
        }
      }
       int m=0 ;
     
        m= A[A.length-1];
        int now  = A[A.length-1];
        for(int i=0;i<A.length-1;i++)
        {
          now = Math.max(now+A[i], A[i]);
        m = Math.max(now, m);
        }
        
      return Math.max(m,max);
     }
 }
 
 //Correct
 
 class Solution {
    public int maxSubarraySumCircular(int[] A) {

        int min = Integer.MIN_VALUE;
        boolean positive = false;
        for (int i = 0; i < A.length; i++) {
            if (A[i] >= 0) {
                positive = true;
                break;
            } else {
                if (A[i] > min) {
                    min = A[i];
                }
            }
        }
        if (!positive) {
            return min;
        }
        for (int i = 0; i < A.length; i++) {
            A[i] = -A[i];
        }

        // run Kadane's algorithm on modified array
        int negMaxSum = Kadane(A);

        // restore the array
        for (int i = 0; i < A.length; i++) {
            A[i] = -A[i];
        }
        int sum = 0;
        for (int i: A) {
            sum += i;
        }
        return Math.max(Kadane(A), sum + negMaxSum);
    }

    static int Kadane(int[] a) {
        int sum = 0;
        int maxSum = 0;
        int firstIndex = -1;

        for (int i = 0; i < a.length; i++) {
            sum += a[i];
            if (sum < 0) {
                sum = 0;
            } else {
                maxSum = Math.max(sum, maxSum);
                if (firstIndex == -1)
                    firstIndex = i;
            }
        }
        // starting again from 0 till firstIndex.
        for (int i = 0; i < firstIndex; i++) {
            sum += a[i];
            if (sum < 0) {
                sum = 0;
            } else {
                maxSum = Math.max(sum, maxSum);
            }
        }
        return maxSum;
    }
}
