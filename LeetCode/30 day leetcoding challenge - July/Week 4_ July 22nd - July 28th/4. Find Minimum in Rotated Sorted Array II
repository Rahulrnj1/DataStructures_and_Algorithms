/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1
Example 2:

Input: [2,2,2,0,1]
Output: 0
Note:

This is a follow up problem to Find Minimum in Rotated Sorted Array.
Would allow duplicates affect the run-time complexity? How and why?
*/

class Solution {
    public int findMin(int[] nums, int start, int end) {
        if (start == end - 1)
            return nums[start];
        int mid = (start + end) / 2;
        int minL = Math.min(nums[start], nums[mid - 1]);
        int minR = Math.min(nums[mid], nums[end - 1]);
        if (minL < minR) {
            return findMin(nums, start, mid);
        } else if (minL > minR) {
            return findMin(nums, mid, end);
        } else {
            return Math.min(findMin(nums, mid, end),
                findMin(nums, start, mid));
        }
    }
    public int findMin(int[] nums) {
        return findMin(nums, 0, nums.length);
    }
}


=============================================================================


class Solution {
    public int findMin(int[] nums,int start,int end) {
        if(start==end) return nums[start];
        int mid=(start+end)/2;
        int lmin = Math.min(nums[start],nums[mid]);
        int rmin = Math.min(nums[mid+1],nums[end]);
        if(lmin==rmin) {
            return Math.min(findMin(nums,start,mid),findMin(nums,mid+1,end));
        }
        else
            return lmin<rmin ? findMin(nums,start,mid): findMin(nums,mid+1,end);
    }
    public int findMin(int[] nums) {
        return findMin(nums,0,nums.length-1);
    }
}

