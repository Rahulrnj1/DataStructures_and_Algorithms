https://www.youtube.com/watch?v=bw0o6v1lQYs

/*
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private TreeNode buildTree(int[] inorder, int i1, int i2, int[] postorder, int p1, int p2) {
        if (i1 >= i2 || p1 >= p2)
            return null;
        TreeNode node = new TreeNode(postorder[p2 - 1]);
        int it = 0;
        for (int i = i1; i < i2; i++) {
            if (postorder[p2 - 1] == inorder[i]) {
                it = i;
                break;
            }
        }
        int diff = it - i1;
        node.left = buildTree(inorder, i1, i1 + diff, postorder, p1, p1 + diff);;
        node.right = buildTree(inorder, i1 + diff + 1, i2, postorder, p1 + diff, p2 - 1);;
        return node;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n = inorder.length;
        if (n == 0)
            return null;
        return buildTree(inorder, 0, n, postorder, 0, n);
    }
}
