/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List < List < Integer >> zigzagLevelOrder(TreeNode root) {

        List < List < Integer >> res = new ArrayList < List < Integer >> ();
        if (root == null)
            return res;
        Stack < TreeNode > curr = new Stack < TreeNode > ();
        Stack < TreeNode > next = new Stack < TreeNode > ();
        curr.push(root);
        boolean itor = false;
        List < Integer > li = new ArrayList < Integer > ();
        li.add(root.val);
        res.add(li);
        while (!curr.isEmpty() || !next.isEmpty()) {
            li = new ArrayList < Integer > ();
            while (!curr.isEmpty()) {
                TreeNode temp = curr.pop();
                if (itor) {
                    if (temp.left != null) {
                        li.add(temp.left.val);
                        next.push(temp.left);
                    }
                    if (temp.right != null) {
                        li.add(temp.right.val);

                        next.push(temp.right);
                    }
                } else {
                    if (temp.right != null) {
                        li.add(temp.right.val);
                        next.push(temp.right);
                    }
                    if (temp.left != null) {
                        li.add(temp.left.val);

                        next.push(temp.left);
                    }
                }
            }
            Stack < TreeNode > t = curr;
            curr = next;
            next = t;
            itor = !itor;
            if (li.size() > 0)
                res.add(li);
        }
        return res;
    }
}
