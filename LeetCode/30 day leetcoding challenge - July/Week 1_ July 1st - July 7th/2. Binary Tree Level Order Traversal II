/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List < List < Integer >> levelOrderBottom(TreeNode root) {
        List < List < Integer >> result = new ArrayList < List < Integer >> ();
        if (root == null)
            return result;
        Queue < TreeNode > queue = new LinkedList < TreeNode > ();
        queue.add(root);
        result.add(new ArrayList(Arrays.asList(root.val)));
        while (queue.size() > 0) {
            int size = queue.size();
            ArrayList < Integer > subRes = new ArrayList < Integer > ();

            while (size > 0) {
                TreeNode temp = queue.poll();

                if (temp.left != null) {
                    subRes.add(temp.left.val);
                    queue.add(temp.left);
                }
                if (temp.right != null) {
                    subRes.add(temp.right.val);
                    queue.add(temp.right);
                }
                size--;
            }
            if (subRes.size() > 0)
                result.add(subRes);
        }
        Collections.reverse(result);
        return result;
    }
}
