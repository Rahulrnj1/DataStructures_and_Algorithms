/*
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.

Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 
Constraints:
1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]
*/

class Solution {

    public void makeGraph(int[][] isConnected, HashMap < Integer, ArrayList < Integer >> hm) {
        for (int i = 0; i < isConnected.length; i++) {
            for (int j = 0; j < isConnected[0].length; j++) {
                if (i != j && isConnected[i][j] == 1) {
                    ArrayList < Integer > li = hm.getOrDefault(i, new ArrayList < Integer > ());
                    li.add(j);
                    hm.put(i, li);
                }
            }
        }
    }

    public void dfs(HashMap < Integer, ArrayList < Integer >> hm, boolean[] visited, int i) {
        if (visited[i])
            return;
        visited[i] = true;
        ArrayList < Integer > li = hm.get(i);
        if (li != null)
            for (int j: li) {
                dfs(hm, visited, j);
            }
    }
    public int findCircleNum(int[][] isConnected) {
        int result = 0;
        HashMap < Integer, ArrayList < Integer >> hm = new HashMap < > ();
        makeGraph(isConnected, hm);

        boolean visited[] = new boolean[isConnected.length];
        for (int i = 0; i < visited.length; i++) {
            if (!visited[i]) {
                result++;
                dfs(hm, visited, i);
            }
        }
        return result;
    }
}
