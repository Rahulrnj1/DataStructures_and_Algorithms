https://leetcode.com/problems/shortest-path-in-binary-matrix

class Solution {
  
 int max = Integer.MAX_VALUE;

    public void findPath(int i, int j, int[][] grid, int m, int n, int ans) {
        if (i == m-1 && j == n-1) {
            max = Math.min(max, ans);
            return;
        }
        if (i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == 0) {
            grid[i][j] = 1;
            findPath(i, j - 1, grid, m, n, ans + 1);
            findPath(i - 1, j, grid, m, n, ans + 1);
            findPath(i + 1, j, grid, m, n, ans + 1);
            findPath(i, j + 1, grid, m, n, ans + 1);
            findPath(i-1, j - 1, grid, m, n, ans + 1);
            findPath(i - 1, j+1, grid, m, n, ans + 1);
            findPath(i + 1, j+1, grid, m, n, ans + 1);
            findPath(i+1, j -1, grid, m, n, ans + 1);
          
          
            grid[i][j] = 0;
        }
    }

    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid[0][0]!=0 || grid[ grid.length-1][grid[0].length-1]!=0)
          return -1;
        findPath(0, 0, grid, grid.length, grid[0].length, 1);
        return max == Integer.MAX_VALUE ? -1 : max;

    }
}

