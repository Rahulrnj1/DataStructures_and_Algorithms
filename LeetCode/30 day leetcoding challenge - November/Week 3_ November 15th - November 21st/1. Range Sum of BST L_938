/*
Given the root node of a binary search tree, return the sum of values of all nodes with a value in the range [low, high].

Example 1:
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32

Example 2:
Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23

Constraints:
The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.
*/

class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
       if(root==null)
         return 0;
      
      if(root.val >= low && root.val <=high){
        if(root.val == low){
          return root.val+ rangeSumBST(root.right, low, high);
        }
        else if(root.val == high){
          return root.val+rangeSumBST(root.left, low, high);
        }
        else{
          return root.val+rangeSumBST(root.right, low, high)+rangeSumBST(root.left, low, high);
        }
          
        }
      else if(root.val<low)
        return rangeSumBST(root.right, low, high);
      else
        return rangeSumBST(root.left, low, high);

      }
    }


================================================================

class Solution {
    int sum = 0;
    public void rangeSumBSTTraverse(TreeNode root, int low, int high) {
        if (root == null)
            return;
        if (root.val >= low && root.val <= high)
            sum += root.val;
        rangeSumBSTTraverse(root.left, low, high);
        rangeSumBSTTraverse(root.right, low, high);
    }
    public int rangeSumBST(TreeNode root, int low, int high) {
        rangeSumBSTTraverse(root, low, high);
        return sum;
    }
}
