/*
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Constraints:
1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
*/

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (o1, o2) - > Integer.compare(o1[0], o2[0]));
        int index = 0;
        int n = intervals.length;
        for (int i = 1; i < n; i++) {
            if (intervals[index][1] >= intervals[i][0]) {
                intervals[index][1] = Math.max(intervals[index][1], intervals[i][1]);
                intervals[index][0] = Math.min(intervals[index][0], intervals[i][0]);
            } else {
                index++;
                intervals[index][0] = intervals[i][0];
                intervals[index][1] = intervals[i][1];
            }
        }
        int[][] res = new int[index + 1][2];
        for (int i = 0; i <= index; i++) {
            res[i][0] = intervals[i][0];
            res[i][1] = intervals[i][1];
        }
        return res;
    }
}

=========================================================================================

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<int[]>(){
          public int compare(int[] a, int[] b){
            return a[0]-b[0];
          }
        });
        int index=0;
        for(int i=1;i<intervals.length;i++){
          if(intervals[index][1] >= intervals[i][0]){
            intervals[index][1] = Math.max(intervals[index][1], intervals[i][1]);
          }
          else{
            index++;
            intervals[index][0]=intervals[i][0];
            intervals[index][1]=intervals[i][1];
          }
        }
      int result[][]=new int[index+1][2];
      for(int i=0;i<=index;i++){
        result[i][0]=intervals[i][0];
        result[i][1]=intervals[i][1];
      }
      return result;
    }
}
