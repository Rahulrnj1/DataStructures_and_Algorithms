/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Follow up:
This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?
*/

class Solution {
    public boolean search(int[] nums, int target, int start, int end) {
        if (start > end) {
            return false;
        }
        int mid = (start + end) / 2;

        if (target == nums[mid])
            return true;

        if (start <= mid - 1 && nums[start] <= nums[mid - 1]) {
            if (target >= nums[start] && target <= nums[mid - 1]) {
                return search(nums, target, start, mid - 1);
            } else if (mid + 1 <= end && (target >= nums[mid + 1] && target <= nums[end])) {
                return search(nums, target, mid + 1, end);
            } else {
                return search(nums, target, start, mid - 1) || search(nums, target, mid + 1, end);
            }
        } else {
            if (mid + 1 <= end && target >= nums[mid + 1] && target <= nums[end]) {
                return search(nums, target, mid + 1, end);
            } else if (start <= mid - 1 && (target >= nums[start] && target <= nums[mid - 1])) {
                return search(nums, target, start, mid - 1);

            } else {
                return search(nums, target, start, mid - 1) || search(nums, target, mid + 1, end);
            }
        }
    }
    public boolean search(int[] nums, int target) {
        return search(nums, target, 0, nums.length - 1);
    }
}
