/*
Given a string s, the power of the string is the maximum length of a non-empty substring that contains only one unique character.
Return the power of the string.

Example 1:
Input: s = "leetcode"
Output: 2
Explanation: The substring "ee" is of length 2 with the character 'e' only.

Example 2:
Input: s = "abbcccddddeeeeedcba"
Output: 5
Explanation: The substring "eeeee" is of length 5 with the character 'e' only.

Example 3:
Input: s = "triplepillooooow"
Output: 5

Example 4:
Input: s = "hooraaaaaaaaaaay"
Output: 11

Example 5:
Input: s = "tourist"
Output: 1

Constraints:
1 <= s.length <= 500
s contains only lowercase English letters.

Hint #1  
Keep an array power where power[i] is the maximum power of the i-th character.
Hint #2  
The answer is max(power[i]).
*/

Solution can be done as how hint 1 is suggesting too

class Solution {
    public int maxPower(String s) {
        Map < Character, Integer > map = new HashMap < > ();
        int count = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            count = 1;
            while ((i + 1) < n && s.charAt(i) == s.charAt(i + 1)) {
                count++;
                i++;
            }

            if ((map.containsKey(s.charAt(i)) && map.get(s.charAt(i)) < count) || !map.containsKey(s.charAt(i))) {
                System.out.println(s.charAt(i) + " " + count + "yo");
                map.put(s.charAt(i), count);
            }
        }
        int result = 0;
        for (Map.Entry < Character, Integer > m: map.entrySet()) {
            result = Math.max(result, m.getValue());
        }
        return result;
    }
}
