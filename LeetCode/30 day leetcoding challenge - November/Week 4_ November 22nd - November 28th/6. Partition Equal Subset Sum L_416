/*
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100
*/

class Solution {
    public boolean partition(int[] nums, int sum, int n) {
        boolean dp[][] = new boolean[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][sum];
    }

    public boolean canPartition(int[] nums) {
        int sum = 0;
        for (int i: nums)
            sum += i;
        if (sum % 2 == 1)
            return false;
        sum = sum / 2;
        return partition(nums, sum, nums.length);
    }
}

//Recursive
/*
if(sum==0)
        return true;
      if(sum>0 && n<=0)
        return false;
      if(nums[n-1] > sum)
        return partition(nums, sum, n-1);
      else
        return partition(nums, sum-nums[n-1], n-1) || partition(nums, sum, n-1);
*/

//Recursive 2

class Solution {
    public boolean canPartition(int n, int[] nums, int sum){
        if(sum==0)
            return true;
        
        if(n==0)
            return false;
        
        if(sum >= nums[n-1]){
            return canPartition(n-1, nums, sum-nums[n-1]) || canPartition(n-1, nums, sum);
        }
        else{
            return canPartition(n-1, nums, sum);
        }    
    }
    
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i:nums)
            sum += i;
        
        if(sum%2==1 || nums.length==1)
            return false;
        
        return canPartition(nums.length, nums, sum/2);
    }
}
