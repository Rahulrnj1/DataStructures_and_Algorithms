https://www.youtube.com/watch?v=x7KWEcnLIK0

/*
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.
Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
Input: [3,2,3,null,3,null,1]
     3
    / \
   2   3
    \   \ 
     3   1
Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

Example 2:
Input: [3,4,5,1,3,null,1]
     3
    / \
   4   5
  / \   \ 
 1   3   1
Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.
*/

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexMatches {
    public static void main(String args[]) {

        // String to be scanned to find the pattern.
        String line = "This order was placed for QT3000! OK?";
        String pattern = "(.*)(\\d+)(.*)";

        // Create a Pattern object
        Pattern r = Pattern.compile(pattern);

        // Now create matcher object.
        Matcher m = r.matcher(line);
        if (m.find()) {
            System.out.println("Found value: " + m.group(0));
            System.out.println("Found value: " + m.group(1));
            System.out.println("Found value: " + m.group(2));
        } else {
            a
            /**
             * Definition for a binary tree node.
             * public class TreeNode {
             *     int val;
             *     TreeNode left;
             *     TreeNode right;
             *     TreeNode() {}
             *     TreeNode(int val) { this.val = val; }
             *     TreeNode(int val, TreeNode left, TreeNode right) {
             *         this.val = val;
             *         this.left = left;
             *         this.right = right;
             *     }
             * }
             */
            class Solution {
                public int rob(TreeNode root) {
                    HashMap < TreeNode, Integer > hm = new HashMap < TreeNode, Integer > ();
                    return memoize(root, hm);
                }
                public int memoize(TreeNode root, HashMap < TreeNode, Integer > hm) {
                    if (root == null)
                        return 0;
                    if (hm.containsKey(root) && hm.get(root) > 0)
                        return hm.get(root);
                    int without = memoize(root.left, hm) + memoize(root.right, hm);

                    int with = root.val;
                    if (root.left != null) {
                        with += memoize(root.left.left, hm) + memoize(root.left.right, hm);
                    }
                    if (root.right != null) {
                        with += memoize(root.right.left, hm) + memoize(root.right.right, hm);
                    }

                    hm.put(root, Math.max(with, without));
                    return hm.get(root);

                }
            }
        }
    }
}
