/*
Given the coordinates of four points in 2D space, return whether the four points could construct a square.
The coordinate (x,y) of a point is represented by an integer array with two integers.

Example:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: True

Note:
All the input integers are in the range [-10000, 10000].
A valid square has four equal sides with positive length and four equal angles (90-degree angles).
Input points have no order.
*/

the simplest solution can get every distance between every two points and add to a set
return set.size() == 2
a square can only have 2 different lengths between two points, Also, any 4 points satisfy conditions below must be a square:
the length of diagonal
the length of the edge

class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        HashSet<Integer> s = new HashSet<>();
        if (isSame(p1, p2) || isSame(p1, p3) || isSame(p1, p4) || isSame(p2, p3) || isSame(p3, p4) || isSame(p2, p4)) {
            return false;
        }
        s.add(dis(p1, p2));
        s.add(dis(p1, p3));
        s.add(dis(p1, p4));
        s.add(dis(p2, p3));
        s.add(dis(p2, p4));
        s.add(dis(p3, p4));
        return s.size() == 2;
    }

    private int dis(int[] p1, int[] p2) {
        return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
    }
    private boolean isSame(int[] p1, int[] p2) {
        return p1[0] == p2[0] && p1[1] == p2[1];
    }
}
