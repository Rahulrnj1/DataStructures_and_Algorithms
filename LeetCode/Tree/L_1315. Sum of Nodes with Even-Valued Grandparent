/*
Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)
If there are no nodes with an even-valued grandparent, return 0.

Example 1:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.
 
Constraints:
The number of nodes in the tree is between 1 and 10^4.
The value of nodes is between 1 and 100.
*/

class Solution {

 //Result variable
  int result = 0;
  public void sumEvenGrandparentHelper(TreeNode root) {

	//Basic check
    if (root == null)
      return;

	//If root value is even, process it
    if (root.val % 2 == 0) {
      result += helper(root);
    }

	//Call function on left & right trees
    sumEvenGrandparentHelper(root.left);
    sumEvenGrandparentHelper(root.right);

  }

  public int helper(TreeNode root) {
	 //Answer variable
    int ans = 0;
	
	//Add left tree grandchildren values, if exist
    if (root.left != null) {
      ans += root.left.left != null ? root.left.left.val : 0;
      ans += root.left.right != null ? root.left.right.val : 0;
    }
	//Add right tree grandchildren values, if exist
    if (root.right != null) {
      ans += root.right.left != null ? root.right.left.val : 0;
      ans += root.right.right != null ? root.right.right.val : 0;
    }
	
	//Return answer
    return ans;
  }

  public int sumEvenGrandparent(TreeNode root) {
	 //A function to iterate over tree and add the nodes values to result variable whose grandparents are even valued nodes
    sumEvenGrandparentHelper(root);
	
	//Return result
    return result;
  }
}
