/*
Given the root of a binary tree, return the postorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [2,1]

Example 5:
Input: root = [1,null,2]
Output: [2,1]
 
Constraints:
The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 
Follow up: Recursive solution is trivial, could you do it iteratively?
*/

class Solution {
  
    public void postOrderHelper(TreeNode root, List<Integer> res){
      if(root == null)
        return;
      
      postOrderHelper(root.right, res);
      
      postOrderHelper(root.left, res);
      res.add(root.val);
    }
  
    public List<Integer> postorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList();
      postOrderHelper(root, res);
      return res;
    }
}


==============================================

//Iterative 

https://www.geeksforgeeks.org/iterative-postorder-traversal/

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList();
        if(root==null)
          return res;
      Stack<TreeNode> st = new Stack<>();
      Stack<TreeNode> st2 = new Stack<>();
      st.add(root);
      while(st.size()>0){
          TreeNode temp = st.pop();
          st2.add(temp);
          if(temp.left!=null){
            st.add(temp.left);
          }
         if(temp.right!=null){
            st.add(temp.right);
        }
      }
      while(!st2.isEmpty())
        res.add(st2.pop().val);
      return res;
    }
}
