/*
Given the root of a binary tree, return all root-to-leaf paths in any order.
A leaf is a node with no children.

Example 1:
Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:
Input: root = [1]
Output: ["1"]
 
Constraints:
The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void findPaths(TreeNode root, String s, List<String> res){
      if(root.left==null && root.right==null)
      {
        res.add(s+root.val);
        return;
      }
      if(root.left!=null)
      findPaths(root.left, s+String.valueOf(root.val)+"->", res);
      if(root.right!=null)
      findPaths(root.right, s+String.valueOf(root.val)+"->", res); 
    }
    public List<String> binaryTreePaths(TreeNode root) {
      if(root==null)
        return null;
      List<String> res = new ArrayList();
      findPaths(root, "", res);
      return res;
    }
}

=============================================================================

class Solution {
    
    private void binaryTreePaths(TreeNode root, List<String> res, StringBuilder str) {
        str.append(root.val);
        if(root.left==null && root.right==null){
            res.add(str.toString());
            str.delete(str.lastIndexOf(">")+1,str.length());
            return;
        }
        str.append("->");
        if(root.left!=null)
        binaryTreePaths(root.left, res, str);
         if(root.right!=null)
        binaryTreePaths(root.right, res, str);
        str.delete(str.length()-2, str.length());
        str.delete(str.lastIndexOf(">")+1,str.length());
    }
    
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList();
        if(root==null)
            return res;
        binaryTreePaths(root, res, new StringBuilder(""));
        return res;
    }
}
