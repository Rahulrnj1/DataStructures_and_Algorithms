Idea: https://www.youtube.com/watch?v=zmPj_Ee3B8c&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=48

/*
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true

Constraints:
The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104
*/

DP:

class Solution {
    boolean ans = true;
    public boolean isBalanced(TreeNode root) {
        isBalancedTree(root);
        return ans;
    }

    public int isBalancedTree(TreeNode head) {
        if (head == null)
            return 0;
        int l = isBalancedTree(head.left);
        int r = isBalancedTree(head.right);
        if (Math.abs(l - r) > 1)
            ans = false;
        int temp = Math.max(l, r) + 1;
        return temp;
    }
}
