/*
Given the root of a binary tree, return the preorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Example 5:
Input: root = [1,null,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Follow up:
Recursive solution is trivial, could you do it iteratively?
*/
 

class Solution {
    List < Integer > res = new ArrayList();
    public void preorderY(Node root) {
        if (root == null)
            return;
        res.add(root.val);
        for (Node child: root.children) {
            preorder(child);
        }
    }
    public List < Integer > preorder(Node root) {
        preorderY(root);
        return res;
    }
}

======================================================

class Solution {
    public void preorderTraversal(TreeNode root, ArrayList<Integer> res){
      if(root==null)
        return;
      res.add(root.val);
      preorderTraversal(root.left, res);
      preorderTraversal(root.right, res);
      
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        preorderTraversal(root,res);
        return res;
    }
}

===============================================================

//Iterative

https://www.geeksforgeeks.org/iterative-preorder-traversal/

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList<>();
      if(root==null)
        return res;
      
      Stack<TreeNode> st = new Stack<>();
      st.add(root);
      while(!st.isEmpty()){
        TreeNode t = st.pop();
        res.add(t.val);
        if(t.right!=null)
          st.add(t.right);
        if(t.left!=null)
          st.add(t.left);
      }
      return res;
      
    }
}
