//https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List < List < Integer >> zigzagLevelOrder(TreeNode root) {

        List < List < Integer >> res = new ArrayList < List < Integer >> ();
        if (root == null)
            return res;
        Stack < TreeNode > curr = new Stack < TreeNode > ();
        Stack < TreeNode > next = new Stack < TreeNode > ();
        curr.push(root);
        boolean itor = false;
        List < Integer > li = new ArrayList < Integer > ();
        li.add(root.val);
        res.add(li);
        while (!curr.isEmpty() || !next.isEmpty()) {
            li = new ArrayList < Integer > ();
            while (!curr.isEmpty()) {
                TreeNode temp = curr.pop();
                if (itor) {
                    if (temp.left != null) {
                        li.add(temp.left.val);
                        next.push(temp.left);
                    }
                    if (temp.right != null) {
                        li.add(temp.right.val);

                        next.push(temp.right);
                    }
                } else {
                    if (temp.right != null) {
                        li.add(temp.right.val);
                        next.push(temp.right);
                    }
                    if (temp.left != null) {
                        li.add(temp.left.val);

                        next.push(temp.left);
                    }
                }

            }
            Stack < TreeNode > t = curr;
            curr = next;
            next = t;
            itor = !itor;
            if (li.size() > 0)
                res.add(li);
        }
        return res;
    }
}


===============================================================================================


class Solution {

    public void addBasedOnFlag(List < List < Integer >> res, boolean flag, Queue < TreeNode > q) {
        ArrayList < Integer > li = new ArrayList();
            for (TreeNode i: q) {
                li.add(i.val);
            }
          if(!flag){
            Collections.reverse(li);
            }
          res.add(li);
    }

    public List < List < Integer >> zigzagLevelOrder(TreeNode root) {
       List < List < Integer >> res = new ArrayList();
        if (root == null)
            return res;
        Queue < TreeNode > q = new LinkedList < > ();
        q.add(root);
        boolean flag = true;
        while (!q.isEmpty()) {
            addBasedOnFlag(res, flag, q);
            int count = q.size();
            while (count > 0) {
                TreeNode temp = q.poll();
                if (temp.left != null) {
                    q.add(temp.left);
                }
                if (temp.right != null) {
                    q.add(temp.right);
                }
                count--;
            }
            flag = !flag;

        }
      return res;
    }
}
