https://leetcode.com/problems/print-binary-tree/discuss/2222758/Java-Easy-Solution

/*
Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:

The height of the tree is height and the number of rows m should be equal to height + 1.
The number of columns n should be equal to 2height+1 - 1.
Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).
For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].
Continue this process until all the nodes in the tree have been placed.
Any empty cells should contain the empty string "".
Return the constructed matrix res.

Example 1:
Input: root = [1,2]
Output: 
[["","1",""],
 ["2","",""]]

Example 2:
Input: root = [1,2,3,null,4]
Output: 
[["","","","1","","",""],
 ["","2","","","","3",""],
 ["","","4","","","",""]] 

Constraints:
The number of nodes in the tree is in the range [1, 210].
-99 <= Node.val <= 99
The depth of the tree will be in the range [1, 10].
*/

class Solution {
    
    private int height(TreeNode root){
        if(root==null)
            return -1;
        int left = height(root.left);
        int right = height(root.right);
        return left>right ? left+1 : right+1;
    }
    
    public void printTree(List<List<String>> res, TreeNode root, int left, int right, int level){
        if(root==null)
            return;
        int mid = (left+right)/2;
        res.get(level).set(mid, root.val+"");
        
        printTree(res, root.left, left, mid-1,level+1);
        printTree(res, root.right, mid+1, right,level+1);
    }
    
    public List<List<String>> printTree(TreeNode root) {
        int h = height(root);
        List<List<String>> res = new ArrayList();
        int row = h+1, column = (int)Math.pow(2,h+1)-1;
        
        for(int i=0;i<row;i++){
            List<String> temp = new ArrayList<>();
            for(int j=0;j<column;j++){
                temp.add("");
            }
            res.add(temp);
        }
        
        int left = 0, right = column-1, level=0;
        printTree(res, root, left, right,level);
        return res;
    }
    
}
