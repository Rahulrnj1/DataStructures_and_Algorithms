https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/discuss/2457028/Java-solution

/*
You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

 

Example 1:


Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.
Example 2:


Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 105
Each node has a unique value.
A node with a value of start exists in the tree.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
      HashMap<Integer, Set<Integer>> map= new HashMap<>();
      createGraph(root, null, map);
      
      Queue<Integer> q = new LinkedList<>();
      HashSet<Integer> visited = new HashSet<>();
      q.add(start);
      visited.add(start);
      
      int count = map.size();
      int res = 0;
      while(!q.isEmpty()){
      int size = q.size();
      for(int i=0;i<size;i++){
        int curr = q.poll();
        count--;
        if(count==0)
          return res;
        
        Set<Integer> temp = map.getOrDefault(curr, new HashSet<Integer>());
        for(int c: temp){
          if(!visited.contains(c)){
            visited.add(c);
            q.add(c);
          }
        }
        
      }
        res++;
        
        
        }
      return 0;
    }
  
  public void createGraph(TreeNode curr, TreeNode parent, HashMap<Integer, Set<Integer>> map){
    if(curr==null)
      return;
    if(parent!=null){
      map.putIfAbsent(curr.val, new HashSet<Integer>());
      map.get(curr.val).add(parent.val);
      map.putIfAbsent(parent.val, new HashSet<Integer>());
      map.get(parent.val).add(curr.val);
    }
    createGraph(curr.left, curr, map);
    createGraph(curr.right, curr, map);
  }
}
