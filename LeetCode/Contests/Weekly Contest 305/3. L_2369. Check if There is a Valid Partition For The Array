https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/discuss/2390630/O(n)-DP-or-Easy-to-understand

/*
You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.

We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:

The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
Return true if the array has at least one valid partition. Otherwise, return false.

 

Example 1:

Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].
This partition is valid, so we return true.
Example 2:

Input: nums = [1,1,1,2]
Output: false
Explanation: There is no valid partition for this array.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 106

*/

//Working

class Solution {
    public boolean validPartition(int[] nums) {
        int n=nums.length;
        boolean[] valid = new boolean[n];
      
       
        if(nums[0]==nums[1])
          valid[1]=true;
       
        if(n==2)
          return valid[1];
      
       if((nums[0]==nums[1] && nums[1]==nums[2]) || (nums[0]+1==nums[1] && nums[1]+1==nums[2]))
         valid[2]=true;
      
       if(n==3)
        return valid[2];      
      
      for(int i=3;i<n;i++){
        if(nums[i]==nums[i-1] && valid[i-2]) valid[i]=true;
        if(nums[i]==nums[i-1] && nums[i-1]==nums[i-2] && valid[i-3]) valid[i]=true;
        if(nums[i]==nums[i-1]+1 && nums[i-1]==nums[i-2]+1 && valid[i-3]) valid[i]=true;
      }
      return valid[n-1];
    }
}

===================================================================================================

//Memory exception

class Solution {
  
    public  boolean check(int nums[]){
      if(nums.length==2)
        return nums[0]==nums[1];
      else{
        return (nums[0]==nums[1] && nums[1]==nums[2]) || (nums[0]==nums[1]-1 && nums[1]==nums[2]-1);
      }
    }
    public boolean validPartition(int[] nums) {
      if(nums.length<2)
        return false;
      if(nums.length==2 || nums.length == 3){
        return check(nums);
      }
      return (validPartition(Arrays.copyOfRange(nums, nums.length-3, nums.length))  && validPartition( Arrays.copyOfRange(nums, 0, nums.length-3))) ||
        (validPartition( Arrays.copyOfRange(nums, nums.length-2, nums.length))  && validPartition( Arrays.copyOfRange(nums, 0, nums.length-2)));
        
    }
}

