/*
Problem Statement:
Write code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to
x. If x is contained within the list, the values of x only need to be after the elements less than x(see below). The partition element 
x can appear anywhere in the "right partition"; it does not need to appear between the left and right partitions.

EXAMPLE
Input: 3->5->8->5->10->2->1 [partition=5]
Output: 3->1->2->10->5->5->8
*/
package LinkedLists;

public class Partition_4 {
		static class Node {
			public Node(int data) {
				super();
				this.data = data;
				this.next = null;
			}

			int data;
			Node next;
		}

		public static void main(String args[]) {
			Node head = new Node(1);
			head.next = new Node(5);
			head.next.next = new Node(7);
			head.next.next.next = new Node(2);
			head.next.next.next.next = new Node(3);
			head.next.next.next.next.next = new Node(4);
			head.next.next.next.next.next.next = new Node(6);
			head.next.next.next.next.next.next.next = new Node(2);
			printList(head);
			head = partitionList(head, 5);
			printList(head);
		}
	 private static Node partitionList(Node head, int x) {
			Node before= head;
			Node after = head;
			while(head!=null)
			{
				Node next=head.next;
				if(head.data<x)
				{
					head.next=before;
					before=head;
				}
				else
				{
					after.next=head;
					after=head;
				}
				head=next;
			}
			after.next=null;
			return before;
		}
		private static void printList(Node head) {
			Node node = head;
			while (node != null) {
				System.out.print(node.data + " ");
				node = node.next;
			}
			System.out.println();
		}
	}
