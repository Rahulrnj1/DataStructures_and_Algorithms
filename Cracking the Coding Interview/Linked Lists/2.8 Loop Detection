/*
Loop Detection: Given a circular linked list, implement an algorithm that returns the node at the begining of the loop.
DEFINITION
Circular linked list: A (corrupt) linked list in which a node's next pointer points to an earlier node, so as to make a loop in the linked list.
EXAMPLE
Input: A->B->C->D->E->C [the same C as earlier]
Output: C
*/

package LinkedLists;

class Node {
	public Node(int data) {
		super();
		this.data = data;
		this.next = null;
	}

	int data;
	Node next;
}

public class LoopDetection_8 {
	public static void main(String args[]) {
		Node head = new Node(1);
		head.next = new Node(0);
		head.next.next = new Node(13);
		head.next.next.next = new Node(8);
		head.next.next.next.next = new Node(3);
		head.next.next.next.next.next = new Node(4);
		head.next.next.next.next.next.next = new Node(6);
		head.next.next.next.next.next.next.next = head.next.next.next;
		Node result = findLoop(head);
		if (result != null) {
			System.out.println(result.data);
		} else {
			System.out.println("Loop doesn't exist");
		}
	}

	private static Node findLoop(Node head) {
		Node fast = head;
		Node slow = head;
		while (fast != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
			if (fast == slow) {
				break;
			}
		}
		if (fast == null || fast.next == null) {
			return null;
		}
		slow = head;
		while (slow != fast) {
			slow = slow.next;
			fast = fast.next;
		}
		return slow;
	}
}
