package LinkedLists;

import java.util.Stack;

public class Palindrome_6 {

	static class Node {
		public Node(int data) {
			super();
			this.data = data;
			this.next = null;
		}

		int data;
		Node next;
	}

	public static void main(String args[]) {
		Node head = new Node(1);
		head.next = new Node(5);
		head.next.next = new Node(7);
		head.next.next.next = new Node(2);
		head.next.next.next.next = new Node(7);
		head.next.next.next.next.next = new Node(5);
		head.next.next.next.next.next.next = new Node(1);
		printList(head);
		System.out.println(isPalindrome(head));
		Node head1 = new Node(1);
		head1.next = new Node(5);
		head1.next.next = new Node(7);
		head1.next.next.next = new Node(2);
		head1.next.next.next.next = new Node(3);
		head1.next.next.next.next.next = new Node(4);
		head1.next.next.next.next.next.next = new Node(6);
		head1.next.next.next.next.next.next.next = new Node(2);
		printList(head1);
		System.out.println(isPalindrome(head1));
		Node head2 = new Node(1);
		head2.next = new Node(5);
		head2.next.next = new Node(7);
		head2.next.next.next = new Node(7);
		head2.next.next.next.next = new Node(5);
		head2.next.next.next.next.next = new Node(1);
		printList(head2);
		System.out.println(isPalindrome(head2));
	}

	private static boolean isPalindrome(Node head) {
		Node fast = head;
		Node slow = head;
		Stack<Integer> st = new Stack<Integer>();
		while (fast != null && fast.next != null) {
			st.push(slow.data);
			fast = fast.next.next;
			slow = slow.next;
		}
		if (fast != null) {
			slow = slow.next;
		}
		while (slow != null) {
			if (st.pop() != slow.data)
				return false;
			slow = slow.next;
		}
		return true;
	}

	private static void printList(Node head) {
		Node node = head;
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
		System.out.println();
	}
}
