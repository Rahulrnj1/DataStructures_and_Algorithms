/*
Problem Statement:
Implement an algorithm to delete a node in the middle(i.e., any node but the first and last node, not necessarily the exact middle)
of a singly linked list, given only access to tha node.
Example
Input: the node c from the linked list a->b->c->d->e->f
Result: nothing is returned, but the new linked list looks like a->b->d->e->f
*/

package LinkedLists;

public class DeleteMiddleNode_3 {

	static class Node {
		public Node(int data) {
			super();
			this.data = data;
			this.next = null;
		}

		int data;
		Node next;
	}

	public static void main(String args[]) {
		Node head = new Node(1);
		head.next = new Node(5);
		head.next.next = new Node(7);
		head.next.next.next = new Node(2);
		head.next.next.next.next = new Node(3);
		head.next.next.next.next.next = new Node(4);
		head.next.next.next.next.next.next = new Node(6);
		head.next.next.next.next.next.next.next = new Node(2);
		printList(head);
		deleteMiddleNode(head.next.next.next.next);
		printList(head);
		deleteMiddleNode(head.next.next.next.next);
		printList(head);
		deleteMiddleNode(head.next.next.next.next);
		printList(head);
		deleteMiddleNode(head.next.next.next.next);
		printList(head);
		deleteMiddleNode(head.next.next.next.next);
		printList(head);

	}

	private static void deleteMiddleNode(Node node) {
		if (node == null || node.next == null) {
			return;
		}
		node.data = node.next.data;
		node.next = node.next.next;
		return;
	}

	private static void printList(Node head) {
		Node node = head;
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
		System.out.println();
	}
}
