https://practice.geeksforgeeks.org/problems/sorted-insert-for-circular-linked-list/1

/*
Given a sorted circular linked list, the task is to insert a new node in this circular list so that it remains a sorted circular linked list.

Example 1:

Input:
LinkedList = 1->2->4
(the first and last node is connected,
i.e. 4 --> 1)
data = 2
Output: 1 2 2 4
Example 2:

Input:
LinkedList = 1->4->7->9
(the first and last node is connected,
i.e. 9 --> 1)
data = 5
Output: 1 4 5 7 9
Your Task:
The task is to complete the function sortedInsert() which should insert the new node into the given circular linked list and return the head of the linkedlist.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
0 <= N <= 105
*/

/*As per gfg article:

1) Linked List is empty:  
    a)  since new_node is the only node in CLL, make a self loop.      
          new_node->next = new_node;  
    b) change the head pointer to point to new node.
          *head_ref = new_node;
2) New node is to be inserted just before the head node:    
  (a) Find out the last node using a loop.
         while(current->next != *head_ref)
            current = current->next;
  (b) Change the next of last node. 
         current->next = new_node;
  (c) Change next of new node to point to head.
         new_node->next = *head_ref;
  (d) change the head pointer to point to new node.
         *head_ref = new_node;
3) New node is to be  inserted somewhere after the head: 
   (a) Locate the node after which new node is to be inserted.
         while ( current->next!= *head_ref && 
             current->next->data < new_node->data)
         {   current = current->next;   }
   (b) Make next of new_node as next of the located pointer
         new_node->next = current->next;
   (c) Change the next of the located pointer
         current->next = new_node;
*/

class Solution
{
	public static Node sortedInsert(Node head,int data)
         {
            //add code here.
            Node newNode = new Node(data);
            
            Node curr = head;
            
            if(curr==null){
                newNode.next=newNode;
                head=newNode;
                return head;
            }
            if(curr.data> newNode.data){
                while(curr.next!=head){
                    curr=curr.next;
                }
                curr.next = newNode;
                newNode.next=head;
                head = newNode;
                return head;
            }
            
            while(curr.next.data < newNode.data){
                curr=curr.next;
            }
            newNode.next=curr.next;
            curr.next=newNode;
            return head;
         }
}

==================================================================

class GfG {
    public static void insert(Node head, int value, int n) {
        if (head == null) {
            return;
        }
        Node temp;
        if (head.data > value) {
            temp = head;
            while (temp.next != head) {
                temp = temp.next;
            }
            temp.next = new Node(value);
            temp.next.next = head;
            head = temp.next;
        } else {
            temp = head;
            while (temp.next.data <= value) {
                temp = temp.next;
            }
            Node temp2 = temp.next;
            temp.next = new Node(value);
            temp.next.next = temp2;
        }
        temp = head;
        System.out.print(temp.data + " ");
        temp = temp.next;
        while (temp != head) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }
}
