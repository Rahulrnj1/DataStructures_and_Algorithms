 https://practice.geeksforgeeks.org/problems/reverse-level-order-traversal/1
 
 First Solution:
 
 class Tree
{
	public void reversePrint(Node node) 
        {
            Queue<Node> q= new LinkedList<Node>();
            Stack<Integer> st=new Stack<Integer>();
            q.add(node);
            while(!q.isEmpty()){
                Node temp=q.poll();
                st.push(temp.data);
                if(temp.right!=null){
                    q.add(temp.right);
                }
                if(temp.left!=null){
                    q.add(temp.left);
                }
            }
            while(!st.isEmpty()){
                System.out.print(st.pop()+" ");
            }
        }
}      
       
Second Solution:
 
class Tree
{
 public static int height(Node node)
    {
        if(node==null){
            return 0;
        }
        int left=height(node.left);
        int right=height(node.right);
        if(left<right)
        {
            return right+1;
        }
        else{
            return left+1;
        }
    }
    public static void reversePrint(Node node, int k)
    {
        if(node==null)
        {
            return;
        }
        if(k==1){
            System.out.print(node.data+" ");
        }
        else
        {
            reversePrint(node.left, k-1);
            reversePrint(node.right, k-1);
        }
    }
	public void reversePrint(Node node) 
        {
            int height= height(node);
            for(int i=height; i>=0; i--)
            {
                reversePrint(node, i);
            }
        }
}
