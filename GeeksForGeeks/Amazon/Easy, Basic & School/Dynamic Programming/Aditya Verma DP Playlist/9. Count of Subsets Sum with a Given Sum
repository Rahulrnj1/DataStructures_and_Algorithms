Aditya verma: https://www.youtube.com/watch?v=F7wqWbqYn9g&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=10

https://www.geeksforgeeks.org/count-of-subsets-with-sum-equal-to-x-using-recursion/?ref=rp

//1. Recursive 

public static int countSubset(int n, int sum, int[] arr) {
 if (sum == 0) {
  return 1;
 }
 if (n == 0)
  return 0;
 if (sum >= arr[n - 1]) {
  return countSubset(n - 1, sum - arr[n - 1], arr) + countSubset(n - 1, sum, arr);
 } else
  return countSubset(n - 1, sum, arr);
}

https://www.geeksforgeeks.org/count-of-subsets-with-sum-equal-to-x/?ref=rp

//2.Dynamic Programming

package Practice;

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG1 {

	public static int countSubset(int n, int sum, int[] arr) {
		int dp[][] = new int[n + 1][sum + 1];
		for (int i = 0; i <= sum; i++)
			dp[0][i] = 0;
		for (int i = 0; i <= n; i++)
			dp[i][0] = 1;
		for (int i = 1; i <= n; i++) {
			System.out.print(i);
			for (int j = 1; j <= sum; j++) {

				if (j < arr[i - 1]) {
					dp[i][j] = dp[i - 1][j];
				} else {
					dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]];
				}
				System.out.print(" " + dp[i][j]);
			}
			System.out.println();
		}
		return dp[n][sum];
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for (int i = 0; i < t; i++) {
			int n = sc.nextInt();
			int[] arr = new int[n];
			for (int j = 0; j < n; j++) {
				arr[j] = sc.nextInt();
			}
			int sum = sc.nextInt();
			System.out.println(countSubset(n, sum, arr));

		}
	}
}
