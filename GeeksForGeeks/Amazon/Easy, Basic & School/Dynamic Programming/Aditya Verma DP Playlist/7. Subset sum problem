https://www.geeksforgeeks.org/subset-sum-problem-dp-25/

Aditya verma: https://www.youtube.com/watch?v=_gPcYovP7wc&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=7

Tushar Roy: https://www.youtube.com/watch?v=s6FhG--P7z0


//1. Recursion

static boolean isSubsetSum(int set[], int n, int sum) {
	if (sum == 0) {
		return true;
	}
	if (n == 0) 
  return false;
	if (sum >= set[n - 1]) {
		return isSubsetSum(set, n - 1, sum - set[n - 1]) || isSubsetSum(set, n - 1, sum);
	} 
 else 
  return isSubsetSum(set, n - 1, sum);
}

//2. Dynamic programming

static boolean isSubsetSum(int set[], int n, int sum) {
	boolean dp[][] = new boolean[n + 1][sum + 1];
	for (int i = 0; i <= sum; i++)
	    dp[0][i] = false;
	for (int i = 0; i < n; i++)
	    dp[i][0] = true;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= sum; j++) {
			if (j < set[i]) {
				dp[i][j] = dp[i - 1][j];
			}
			else {
				dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i]];
			}
		}
	}
	return dp[n][sum];
}
