https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence/0

https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
    static int longestIncreasingSubsequence(int[] arr, int n)
    {
        int lis[]= new int[n];
        Arrays.fill(lis, 1);
        for(int i=1;i<n;i++)
        {
            for(int j=0; j<i;j++)
            {
                if(arr[i]>arr[j] && (lis[i]<lis[j]+1))
                {
                    lis[i] = lis[j]+1;
                }
            }
        }
        int res=lis[0];
        for(int i=1;i<n;i++)
        {
            res= Math.max(lis[i], res);
        }
        return res;
    }
	public static void main (String[] args)
	 {
	    Scanner sc=new Scanner(System.in);
	    int n=sc.nextInt();
	    for(int i=0;i<n;i++)
	    {
	        int t=sc.nextInt();
	        int[] arr=new int[t];
	        for(int j=0;j<t;j++)
	        {
	            arr[j]=sc.nextInt();
	        }
	        System.out.println(longestIncreasingSubsequence(arr, arr.length));
	    }
	 }
}

//https://www.youtube.com/watch?v=ekcwMsSIzVc

//Recursive
class Solution {
    
    public int lengthOfLIS(int idx, int prev_idx, int n, int[] nums){
        if(idx==n)
            return 0;
        
        int len = 0+lengthOfLIS(idx+1, prev_idx,n,nums);
        if(prev_idx == -1 || nums[idx] > nums[prev_idx]){
            len = Math.max(len, 1+lengthOfLIS(idx+1,idx,n,nums));
        }
        return len;

    }
    
    public int lengthOfLIS(int[] nums) {
        return lengthOfLIS(0, -1, nums.length,nums);
    }
}

//Memoized
class Solution {
    
    public int lengthOfLIS(int idx, int prev_idx, int n, int[][]dp,int[] nums){
        if(idx==n)
            return 0;
        
        if(dp[idx][prev_idx+1]!=-1)
            return dp[idx][prev_idx+1];
        
        int len = 0+lengthOfLIS(idx+1, prev_idx,n,dp,nums);
        if(prev_idx == -1 || nums[idx] > nums[prev_idx]){
            len = Math.max(len, 1+lengthOfLIS(idx+1,idx,n,dp,nums));
        }
        return dp[idx][prev_idx+1]= len;

    }
    
    public int lengthOfLIS(int[] nums) {
        int[][] dp = new int[nums.length][nums.length+1];
        for(int i=0;i<nums.length;i++){
            Arrays.fill(dp[i], -1);
        }
        return lengthOfLIS(0, -1, nums.length, dp,nums);
    }
}
