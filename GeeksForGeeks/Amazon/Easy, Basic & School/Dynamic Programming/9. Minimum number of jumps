https://practice.geeksforgeeks.org/problems/minimum-number-of-jumps/0

https://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/


// { Driver Code Starts
import java.lang.*;
import java.io.*;
import java.util.*;
class GFG
 {
	public static void main (String[] args) throws IOException
	 {
	 
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        int t = Integer.parseInt(br.readLine()); 

        while(t-- > 0){
            int size = Integer.parseInt(br.readLine());
            String[] arrStr = ((String)br.readLine()).split("\\s+");
            int[] arr= new int[size];
            for(int i = 0;i<size;i++){
                arr[i] = Integer.parseInt(arrStr[i]);
            }
            System.out.println(new solve().minJumps(arr));
        }
	 }
	 
}
// } Driver Code Ends


class solve{
    static int minJumps(int[] arr){
        if(arr.length==0 || arr[0]<=0)
            return -1;
        int n= arr.length;
        int dp[] = new int[n];
        Arrays.fill(dp, -1);
        dp[0]=0;
        for(int i=0;i<n-1;i++){
            for(int j=i+1; j<n && j<=i+arr[i]; j++){
                if(dp[j]==-1 || dp[j]>dp[i]+1){
                    dp[j]=dp[i]+1;
                }
            } 
        }
        return dp[n-1];
    }
}

=================================================================================================================================

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    static int findMinJumps(int[] arr, int n) {
        if (n <= 1) {
            return 0;
        }
        if (arr[0] == 0) {
            return -1;
        }
        int max = arr[0];
        int steps = arr[0];
        int jumps = 1;
        for (int i = 1; i < n; i++) {
            if (i == n - 1) {
                return jumps;
            }
            max = Math.max(max, i + arr[i]);
            steps--;
            if (steps == 0) {
                jumps++;
                if (i >= max) {
                    return -1;
                }
                steps = max - i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            for (int j = 0; j < n; j++) {
                arr[j] = sc.nextInt();
            }
            System.out.println(findMinJumps(arr, n));
        }
    }
}
