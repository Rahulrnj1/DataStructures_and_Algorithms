https://practice.geeksforgeeks.org/problems/cutted-segments/0

https://www.geeksforgeeks.org/maximize-the-number-of-segments-of-length-p-q-and-r/


// do it with below approach like longest common increasing subsequence

l = 11, p = 2, q = 3, r = 5
Analysing lengths from 1 to 11:

Not possible to cut->0
Possible cut is of lengths 2->1 (2)
Possible cut is of lengths 3->1 (3)
Possible cuts are of lengths max(arr[4-2],arr[4-3])+1->2 (2,2)
Possible cuts are of lengths max(arr[5-2],arr[5-3])+1->2 (2,3)
Possible cuts are of lengths max(arr[6-2],arr[6-3],arr[6-5])+1->3 (2,2,2)
Possible cuts are of lengths max(arr[7-2],arr[7-3],arr[7-5])+1->3 (2,3,2) or (2,2,3)
Possible cuts are of lengths max(arr[8-2],arr[8-3],arr[8-5])+1->4 (2,2,2,2)
Possible cuts are of lengths max(arr[9-2],arr[9-3],arr[9-5])+1->4 (2,3,2,2) or (2,2,3,2) or (2,2,2,3)
Possible cuts are of lengths max(arr[10-2],arr[10-3],arr[10-5])+1->5 (2,2,2,2,2)
Possible cuts are of lengths max(arr[11-2],arr[11-3],arr[11-5])+1->5 (2,3,2,2,2) or (2,2,3,2,2) or (2,2,2,3,2) or (2,2,2,2,3)

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
    static int maxCut(int l, int p, int q, int r)
    {
        int dp[]=new int[l+1];
        Arrays.fill(dp,-1);
        dp[0]=0;
        for(int i=0;i<=l;i++)
        {
            if(dp[i]==-1)
                continue;
            if(i+p<=l)
            {
                dp[i+p]= Math.max(dp[i]+1, dp[i+p]);
            }
            if(i+q<=l)
            {
                dp[i+q]= Math.max(dp[i]+1, dp[i+q]);
            }
            if(i+r<=l)
            {
                dp[i+r]= Math.max(dp[i]+1, dp[i+r]);
            }
        }
        return dp[l]==-1?0:dp[l];
    }
	public static void main (String[] args)
	 {
	    Scanner sc=new Scanner(System.in);
	    int t=sc.nextInt();
	    for(int i=0;i<t;i++)
	    {
	        int l=sc.nextInt();
	        int p=sc.nextInt();
	        int q=sc.nextInt();
	        int r=sc.nextInt();
	        System.out.println(maxCut(l,p,q,r));
	    }
	 }
}

//Recursion

{
    //Function to find the maximum number of cuts.
    public int maximizeCuts(int l, int p, int q, int r)
    {
       if(l==0)
       return 0;
       
       int a=0,b=0,c=0;
       
       if(p<=l){
           a=maximizeCuts(l-p, p,q,r);
       }
       
       if(q<=l){
           b=maximizeCuts(l-q, p,q,r);
       }
       
       if(r<=l){
           c=maximizeCuts(l-r, p,q,r);
       }
       return 1+Math.max(a, Math.max(b,c));
    }
}


==========================================================================


//Memoization


class Solution
{
int func(int l, int p, int q, int r, int[] dp)
{
    if(l==0)
       return 0;                               
            
     if(dp[l]!=-1)                              
        return dp[l];
         
     int a=Integer.MIN_VALUE,b=Integer.MIN_VALUE,c=Integer.MIN_VALUE;         
   
     if(p<=l)                                      
        a=func(l-p,p,q,r,dp);
   
     if(q<=l)                                      
        b=func(l-q,p,q,r,dp);
   
     if(r<=l)                                      
        c=func(l-r,p,q,r,dp);
   
     return dp[l]=1+Math.max(a,Math.max(b,c));                    
         
}

    public int maximizeCuts(int l, int p, int q, int r)
    {
        int[] dp = new int[l+1];
        Arrays.fill(dp,-1);
        func(l,p,q,r,dp);
       return  dp[l] < 0 ? 0 : dp[l];
    }
}
