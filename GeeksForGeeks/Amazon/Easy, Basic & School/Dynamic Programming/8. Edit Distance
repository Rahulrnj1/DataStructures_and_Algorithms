https://practice.geeksforgeeks.org/problems/edit-distance/0

https://www.geeksforgeeks.org/edit-distance-dp-5/

//Recursive solution

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static int editDistance(String s1, String s2, int m, int n) {
        if (m == 0)
            return n;
        if (n == 0)
            return m;
        if (s1.charAt(m - 1) == s2.charAt(n - 1))
            return editDistance(s1, s2, m - 1, n - 1);
        else
            return 1 + Math.min(editDistance(s1, s2, m, n - 1),
                Math.min(editDistance(s1, s2, m - 1, n),
                    editDistance(s1, s2, m - 1, n - 1)));
    }
    public static void main(String[] args) {
        Scanner kb = new Scanner(System.in);
        int t = kb.nextInt();
        for (int i = 0; i < t; i++) {
            int m = kb.nextInt();
            int n = kb.nextInt();
            String s1 = kb.next();
            String s2 = kb.next();
            System.out.println(editDistance(s1, s2, m, n));
        }
    }
}

//DP Solution

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static int editDistance(String s1, String s2, int m, int n) {
        int dp[][] = new int[m + 1][n + 1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0)
                    dp[i][j] = j;
                if (j == 0)
                    dp[i][j] = i;
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i][j - 1], Math.min(dp[i - 1][j], dp[i - 1][j - 1]));
                }
            }
        }
        return dp[m][n];
    }
    public static void main(String[] args) {
        Scanner kb = new Scanner(System.in);
        int t = kb.nextInt();
        for (int i = 0; i < t; i++) {
            int m = kb.nextInt();
            int n = kb.nextInt();
            String s1 = kb.next();
            String s2 = kb.next();
            System.out.println(editDistance(s1, s2, m, n));
        }
    }
}
