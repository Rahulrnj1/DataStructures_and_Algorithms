https://practice.geeksforgeeks.org/problems/minimum-sum-partition/0

https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/

Aditya verma: https://www.youtube.com/watch?v=-GtpxG6l_Mc&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=11

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    static int minimumSum(int[] arr, int n, int sum) {
        int s = sum / 2;
        boolean dp[][] = new boolean[n + 1][s + 1];
        for (int i = 0; i <= s; i++) {
            dp[0][i] = false;
        }
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= s; j++) {
                if (j < arr[i - 1]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                }
            }
        }
        
        
        /*==========================================*/
        int max = Integer.MAX_VALUE;
        for (int i = 0; i <= s; i++) {
            if (dp[n][i] == true) {
                max = Math.min(max, Math.abs(sum - (2 * i)));
            }
        }
        return max;
        
        /*==============  OR  =========================*/
        
         int max=Integer.MIN_VALUE;
	      for(int i=0;i<=s;i++)
	      {
	          if(dp[n][i]==true)
	          {
	              max=Math.max(max, i);
	          }
	      }
	      return sum-max*2;
          
          /*============================================*/
                
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int j = 0; j < t; j++) {
            int n = sc.nextInt();
            int arr[] = new int[n];
            int sum = 0;
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
                sum += arr[i];
            }
            System.out.println(minimumSum(arr, n, sum));
        }
    }
}


===============================================================================

//optimized

class Solution
{

	public int minDifference(int arr[], int n) 
	{ 
	    int sum = 0;
	    for(int i : arr){
	        sum+=i;
	    }
	    int halfSum = sum/2;
	    boolean[][] dp = new boolean[n+1][halfSum+1];
	    
	    for(int i=0;i<=n;i++){
	        dp[i][0] = true;
	    }
	    
	    for(int i=1;i<=n;i++){
	        for(int j=1;j<=halfSum;j++){
                if(j>=arr[i-1]){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
	        }
	    }
	    
	    for(int i= halfSum; i>=0;i--){
	        if(dp[n][i] == true){
	            return sum - 2*i;
	        }
	    }
	     
	    return 0;
	} 
}
