https://practice.geeksforgeeks.org/problems/knapsack-with-duplicate-items/0

https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/

https://www.youtube.com/watch?v=aycn9KO8_Ls&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=13

Recursive:

class Solution {
    static int knapSack(int n, int W, int val[], int wt[]) {
        {
            // Base Case 
            if (n == 0 || W == 0)
                return 0;

            // If weight of the nth item is 
            // more than Knapsack capacity W, 
            // then this item cannot be included 
            // in the optimal solution 
            if (wt[n - 1] > W)
                return knapSack(n - 1, W, val, wt);

            // Return the maximum of two cases: 
            // (1) nth item included 
            // (2) not included 
            else
                return Math.max(
                    val[n - 1] + knapSack(n, W - wt[n - 1],
                        val, wt),
                    knapSack(n - 1, W, val, wt));
        }
    }
}

Dynamic programming:

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
	    static int knapsack(int[] wt, int[] val, int w, int n) {
        int dp[][] = new int[n + 1][w + 1];
        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < w + 1; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                }
            }
        }
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < w + 1; j++) {
                if (wt[i - 1] <= j) {
                    dp[i][j] = Math.max(val[i - 1] + dp[i][j - wt[i - 1]], dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][w];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int j = 0; j < t; j++) {
            int n = sc.nextInt();
            int w = sc.nextInt();
            int val[] = new int[n];
            int wt[] = new int[n];
            for (int i = 0; i < n; i++) {
                val[i] = sc.nextInt();
            }
            for (int i = 0; i < n; i++) {
                wt[i] = sc.nextInt();
            }

            System.out.println(knapsack(wt, val, w, n));

	 }
}
}
