
class Solution {
    
    static int max = Integer.MAX_VALUE;

public static void findPath(int i, int j, int[] destination, int[][] grid, int m,  int n, int[] diri, int[] dirj, int ans){
        if(i==destination[0] && j==destination[1]){
            max = Math.min(max, ans);
            return;
        }
        for(int idx=0;idx<4;idx++){
                int newI = i+diri[idx];
                int newJ = j+dirj[idx];
                if(newI>=0 && newI<m && newJ>=0 && newJ<n && grid[newI][newJ]==1){
                    grid[i][j] =0;
                    findPath(newI,newJ,destination, grid,m,n,diri,dirj,ans+1);
                    grid[i][j] =1;
                }
            }
        
    }
    
    int shortestPath(int[][] grid, int[] source, int[] destination) {
        int[] diri = new int[]{-1,1,0,0};
        int[] dirj = new int[]{0,0,-1,1};
        findPath(source[0], source[1], destination,grid, grid.length, grid[0].length,diri,dirj, 0);
        return max == Integer.MAX_VALUE ? -1 :max ;
    }
}
