//Solution: https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/

/*
Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.

Example 1:
Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9
Explanation:
Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which 
is a contiguous subarray.

Example 2:
Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1
Explanation:
Max subarray sum is -1 
of element (-1)
*/

//Kadane algorithm

class Solution{
    long maxSubarraySum(int arr[], int n){
        int max_so_far = Integer.MIN_VALUE;
        int max = 0;
        for(int i=0; i<n;i++){
            max = max + arr[i];
            if(max_so_far < max){
                max_so_far=max;
            }
            if(max<0)
                max = 0;
        }
        return max_so_far;
    }  
}

=========================================================

class Solution{
    long maxSubarraySum(int arr[], int n){
        int curr = arr[0], max= arr[0];
        for(int i=1;i<n;i++){
            curr = Math.max(arr[i], curr+arr[i]);
            max = Math.max(max, curr);
        }
        return max;
    }
}
