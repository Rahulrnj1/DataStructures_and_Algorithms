https://www.geeksforgeeks.org/efficiently-merging-two-sorted-arrays-with-o1-extra-space/

/*
Given two sorted arrays, we need to merge them in O((n+m)*log(n+m)) time with O(1) extra space into a sorted array, when n is the size of the first array, and m is the size of the second array.

Example:  

Input: ar1[] = {10};
       ar2[] = {2, 3};
Output: ar1[] = {2}
        ar2[] = {3, 10}  

Input: ar1[] = {1, 5, 9, 10, 15, 20};
       ar2[] = {2, 3, 8, 13};
Output: ar1[] = {1, 2, 3, 5, 8, 9}
        ar2[] = {10, 13, 15, 20} 
*/


class MergeSort
{
    public static int nextGap(int gap){
        if(gap<=1)
         return 0;
        return (gap/2) + (gap%2);
    }
    
    public static void merge(int arr1[], int arr2[], int n, int m) 
    {
        int i=0, j=0;
        int gap = n+m;
         for( gap = nextGap(gap) ; gap>0 ; gap = nextGap(gap)){
             
            for(i=0 ; i+gap<n ; i++){
                if(arr1[i] > arr1[i+gap]){
                    int temp = arr1[i];
                    arr1[i] = arr1[i+gap];
                    arr1[i+gap] = temp;
                }
            } 
            
            for(j = gap>n ? gap-n: 0; i<n && j<m; i++, j++){
                if(arr1[i]> arr2[j]){
                    int temp= arr1[i];
                    arr1[i] =arr2[j];
                    arr2[j] = temp;
                }
            }
            
            if(j<m){
                for(j=0;j+gap<m;j++){
                if(arr2[j] > arr2[j+gap]){
                    int temp =arr2[j];
                    arr2[j] = arr2[j+gap];
                    arr2[j+gap] = temp;
                }
                }
            }
         }
    }
}
