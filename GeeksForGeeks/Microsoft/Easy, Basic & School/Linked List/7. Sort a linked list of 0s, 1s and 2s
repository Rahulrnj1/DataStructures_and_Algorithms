https://www.geeksforgeeks.org/sort-a-linked-list-of-0s-1s-or-2s/

https://www.techiedelight.com/sort-linked-list-containing-0s-1s-2s/

import java.util.*;
import java.lang.*;
import java.io.*;

class Node {
    int data;
    Node next;
    Node(int key) {
        data = key;
        next = null;
    }
}

class Driverclass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            while (n-- > 1) {
                tail.next = new Node(sc.nextInt());
                tail = tail.next;
            }

            head = new LinkedList().segregate(head);
            printList(head);
            System.out.println();
        }
    }

    public static void printList(Node head) {
        if (head == null)
            return;

        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }


}



// } Driver Code Ends


//User function Template for Java

/*
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        next = null;
    }
}
*/
class LinkedList {
    static Node segregate(Node head) {
        Node first = new Node(0), second = new Node(0), third = new Node(0);
        Node zero = first, one = second, two = third;
        Node curr = head;
        while (curr != null) {
            if (curr.data == 0) {
                zero.next = curr;
                zero = zero.next;
            } else if (curr.data == 1) {
                one.next = curr;
                one = one.next;
            } else {
                two.next = curr;
                two = two.next;
            }
            curr = curr.next;
        }
        zero.next = second.next != null ? second.next : third.next;
        one.next = third.next;
        two.next = null;
        return first.next;
    }
}
